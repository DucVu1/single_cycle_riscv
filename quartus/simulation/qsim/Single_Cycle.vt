// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2024 14:45:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Single_Cycle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Single_Cycle_vlg_sample_tst(
	clk_i,
	io_sw,
	rst_ni,
	sampler_tx
);
input  clk_i;
input [31:0] io_sw;
input  rst_ni;
output sampler_tx;

reg sample;
time current_time;
always @(clk_i or io_sw or rst_ni)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Single_Cycle_vlg_check_tst (
	alu_data_out,
	branch_signal,
	instruc_test,
	io_hex0,
	io_hex1,
	io_hex2,
	io_hex3,
	io_hex4,
	io_hex5,
	io_hex6,
	io_hex7,
	io_lcd,
	io_ledg,
	io_ledr,
	pc_debug,
	rs1,
	rs2,
	wb_mux_out,
	sampler_rx
);
input [31:0] alu_data_out;
input  branch_signal;
input [31:0] instruc_test;
input [6:0] io_hex0;
input [6:0] io_hex1;
input [6:0] io_hex2;
input [6:0] io_hex3;
input [6:0] io_hex4;
input [6:0] io_hex5;
input [6:0] io_hex6;
input [6:0] io_hex7;
input [7:0] io_lcd;
input [8:0] io_ledg;
input [17:0] io_ledr;
input [31:0] pc_debug;
input [4:0] rs1;
input [4:0] rs2;
input [31:0] wb_mux_out;
input sampler_rx;

reg [31:0] alu_data_out_expected;
reg  branch_signal_expected;
reg [31:0] instruc_test_expected;
reg [6:0] io_hex0_expected;
reg [6:0] io_hex1_expected;
reg [6:0] io_hex2_expected;
reg [6:0] io_hex3_expected;
reg [6:0] io_hex4_expected;
reg [6:0] io_hex5_expected;
reg [6:0] io_hex6_expected;
reg [6:0] io_hex7_expected;
reg [7:0] io_lcd_expected;
reg [8:0] io_ledg_expected;
reg [17:0] io_ledr_expected;
reg [31:0] pc_debug_expected;
reg [4:0] rs1_expected;
reg [4:0] rs2_expected;
reg [31:0] wb_mux_out_expected;

reg [31:0] alu_data_out_prev;
reg  branch_signal_prev;
reg [31:0] instruc_test_prev;
reg [6:0] io_hex0_prev;
reg [6:0] io_hex1_prev;
reg [6:0] io_hex2_prev;
reg [6:0] io_hex3_prev;
reg [6:0] io_hex4_prev;
reg [6:0] io_hex5_prev;
reg [6:0] io_hex6_prev;
reg [6:0] io_hex7_prev;
reg [7:0] io_lcd_prev;
reg [8:0] io_ledg_prev;
reg [17:0] io_ledr_prev;
reg [31:0] pc_debug_prev;
reg [4:0] rs1_prev;
reg [4:0] rs2_prev;
reg [31:0] wb_mux_out_prev;

reg [31:0] alu_data_out_expected_prev;
reg  branch_signal_expected_prev;
reg [31:0] instruc_test_expected_prev;
reg [6:0] io_hex0_expected_prev;
reg [6:0] io_hex1_expected_prev;
reg [6:0] io_hex2_expected_prev;
reg [6:0] io_hex3_expected_prev;
reg [6:0] io_hex4_expected_prev;
reg [6:0] io_hex5_expected_prev;
reg [6:0] io_hex6_expected_prev;
reg [6:0] io_hex7_expected_prev;
reg [7:0] io_lcd_expected_prev;
reg [8:0] io_ledg_expected_prev;
reg [17:0] io_ledr_expected_prev;
reg [31:0] pc_debug_expected_prev;
reg [4:0] rs1_expected_prev;
reg [4:0] rs2_expected_prev;
reg [31:0] wb_mux_out_expected_prev;

reg [31:0] last_alu_data_out_exp;
reg  last_branch_signal_exp;
reg [31:0] last_instruc_test_exp;
reg [6:0] last_io_hex0_exp;
reg [6:0] last_io_hex1_exp;
reg [6:0] last_io_hex2_exp;
reg [6:0] last_io_hex3_exp;
reg [6:0] last_io_hex4_exp;
reg [6:0] last_io_hex5_exp;
reg [6:0] last_io_hex6_exp;
reg [6:0] last_io_hex7_exp;
reg [7:0] last_io_lcd_exp;
reg [8:0] last_io_ledg_exp;
reg [17:0] last_io_ledr_exp;
reg [31:0] last_pc_debug_exp;
reg [4:0] last_rs1_exp;
reg [4:0] last_rs2_exp;
reg [31:0] last_wb_mux_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_data_out_prev = alu_data_out;
	branch_signal_prev = branch_signal;
	instruc_test_prev = instruc_test;
	io_hex0_prev = io_hex0;
	io_hex1_prev = io_hex1;
	io_hex2_prev = io_hex2;
	io_hex3_prev = io_hex3;
	io_hex4_prev = io_hex4;
	io_hex5_prev = io_hex5;
	io_hex6_prev = io_hex6;
	io_hex7_prev = io_hex7;
	io_lcd_prev = io_lcd;
	io_ledg_prev = io_ledg;
	io_ledr_prev = io_ledr;
	pc_debug_prev = pc_debug;
	rs1_prev = rs1;
	rs2_prev = rs2;
	wb_mux_out_prev = wb_mux_out;
end

// update expected /o prevs

always @(trigger)
begin
	alu_data_out_expected_prev = alu_data_out_expected;
	branch_signal_expected_prev = branch_signal_expected;
	instruc_test_expected_prev = instruc_test_expected;
	io_hex0_expected_prev = io_hex0_expected;
	io_hex1_expected_prev = io_hex1_expected;
	io_hex2_expected_prev = io_hex2_expected;
	io_hex3_expected_prev = io_hex3_expected;
	io_hex4_expected_prev = io_hex4_expected;
	io_hex5_expected_prev = io_hex5_expected;
	io_hex6_expected_prev = io_hex6_expected;
	io_hex7_expected_prev = io_hex7_expected;
	io_lcd_expected_prev = io_lcd_expected;
	io_ledg_expected_prev = io_ledg_expected;
	io_ledr_expected_prev = io_ledr_expected;
	pc_debug_expected_prev = pc_debug_expected;
	rs1_expected_prev = rs1_expected;
	rs2_expected_prev = rs2_expected;
	wb_mux_out_expected_prev = wb_mux_out_expected;
end


// expected pc_debug[ 31 ]
initial
begin
	pc_debug_expected[31] = 1'bX;
end 
// expected pc_debug[ 30 ]
initial
begin
	pc_debug_expected[30] = 1'bX;
end 
// expected pc_debug[ 29 ]
initial
begin
	pc_debug_expected[29] = 1'bX;
end 
// expected pc_debug[ 28 ]
initial
begin
	pc_debug_expected[28] = 1'bX;
end 
// expected pc_debug[ 27 ]
initial
begin
	pc_debug_expected[27] = 1'bX;
end 
// expected pc_debug[ 26 ]
initial
begin
	pc_debug_expected[26] = 1'bX;
end 
// expected pc_debug[ 25 ]
initial
begin
	pc_debug_expected[25] = 1'bX;
end 
// expected pc_debug[ 24 ]
initial
begin
	pc_debug_expected[24] = 1'bX;
end 
// expected pc_debug[ 23 ]
initial
begin
	pc_debug_expected[23] = 1'bX;
end 
// expected pc_debug[ 22 ]
initial
begin
	pc_debug_expected[22] = 1'bX;
end 
// expected pc_debug[ 21 ]
initial
begin
	pc_debug_expected[21] = 1'bX;
end 
// expected pc_debug[ 20 ]
initial
begin
	pc_debug_expected[20] = 1'bX;
end 
// expected pc_debug[ 19 ]
initial
begin
	pc_debug_expected[19] = 1'bX;
end 
// expected pc_debug[ 18 ]
initial
begin
	pc_debug_expected[18] = 1'bX;
end 
// expected pc_debug[ 17 ]
initial
begin
	pc_debug_expected[17] = 1'bX;
end 
// expected pc_debug[ 16 ]
initial
begin
	pc_debug_expected[16] = 1'bX;
end 
// expected pc_debug[ 15 ]
initial
begin
	pc_debug_expected[15] = 1'bX;
end 
// expected pc_debug[ 14 ]
initial
begin
	pc_debug_expected[14] = 1'bX;
end 
// expected pc_debug[ 13 ]
initial
begin
	pc_debug_expected[13] = 1'bX;
end 
// expected pc_debug[ 12 ]
initial
begin
	pc_debug_expected[12] = 1'bX;
end 
// expected pc_debug[ 11 ]
initial
begin
	pc_debug_expected[11] = 1'bX;
end 
// expected pc_debug[ 10 ]
initial
begin
	pc_debug_expected[10] = 1'bX;
end 
// expected pc_debug[ 9 ]
initial
begin
	pc_debug_expected[9] = 1'bX;
end 
// expected pc_debug[ 8 ]
initial
begin
	pc_debug_expected[8] = 1'bX;
end 
// expected pc_debug[ 7 ]
initial
begin
	pc_debug_expected[7] = 1'bX;
end 
// expected pc_debug[ 6 ]
initial
begin
	pc_debug_expected[6] = 1'bX;
end 
// expected pc_debug[ 5 ]
initial
begin
	pc_debug_expected[5] = 1'bX;
end 
// expected pc_debug[ 4 ]
initial
begin
	pc_debug_expected[4] = 1'bX;
end 
// expected pc_debug[ 3 ]
initial
begin
	pc_debug_expected[3] = 1'bX;
end 
// expected pc_debug[ 2 ]
initial
begin
	pc_debug_expected[2] = 1'bX;
end 
// expected pc_debug[ 1 ]
initial
begin
	pc_debug_expected[1] = 1'bX;
end 
// expected pc_debug[ 0 ]
initial
begin
	pc_debug_expected[0] = 1'bX;
end 
// expected instruc_test[ 31 ]
initial
begin
	instruc_test_expected[31] = 1'bX;
end 
// expected instruc_test[ 30 ]
initial
begin
	instruc_test_expected[30] = 1'bX;
end 
// expected instruc_test[ 29 ]
initial
begin
	instruc_test_expected[29] = 1'bX;
end 
// expected instruc_test[ 28 ]
initial
begin
	instruc_test_expected[28] = 1'bX;
end 
// expected instruc_test[ 27 ]
initial
begin
	instruc_test_expected[27] = 1'bX;
end 
// expected instruc_test[ 26 ]
initial
begin
	instruc_test_expected[26] = 1'bX;
end 
// expected instruc_test[ 25 ]
initial
begin
	instruc_test_expected[25] = 1'bX;
end 
// expected instruc_test[ 24 ]
initial
begin
	instruc_test_expected[24] = 1'bX;
end 
// expected instruc_test[ 23 ]
initial
begin
	instruc_test_expected[23] = 1'bX;
end 
// expected instruc_test[ 22 ]
initial
begin
	instruc_test_expected[22] = 1'bX;
end 
// expected instruc_test[ 21 ]
initial
begin
	instruc_test_expected[21] = 1'bX;
end 
// expected instruc_test[ 20 ]
initial
begin
	instruc_test_expected[20] = 1'bX;
end 
// expected instruc_test[ 19 ]
initial
begin
	instruc_test_expected[19] = 1'bX;
end 
// expected instruc_test[ 18 ]
initial
begin
	instruc_test_expected[18] = 1'bX;
end 
// expected instruc_test[ 17 ]
initial
begin
	instruc_test_expected[17] = 1'bX;
end 
// expected instruc_test[ 16 ]
initial
begin
	instruc_test_expected[16] = 1'bX;
end 
// expected instruc_test[ 15 ]
initial
begin
	instruc_test_expected[15] = 1'bX;
end 
// expected instruc_test[ 14 ]
initial
begin
	instruc_test_expected[14] = 1'bX;
end 
// expected instruc_test[ 13 ]
initial
begin
	instruc_test_expected[13] = 1'bX;
end 
// expected instruc_test[ 12 ]
initial
begin
	instruc_test_expected[12] = 1'bX;
end 
// expected instruc_test[ 11 ]
initial
begin
	instruc_test_expected[11] = 1'bX;
end 
// expected instruc_test[ 10 ]
initial
begin
	instruc_test_expected[10] = 1'bX;
end 
// expected instruc_test[ 9 ]
initial
begin
	instruc_test_expected[9] = 1'bX;
end 
// expected instruc_test[ 8 ]
initial
begin
	instruc_test_expected[8] = 1'bX;
end 
// expected instruc_test[ 7 ]
initial
begin
	instruc_test_expected[7] = 1'bX;
end 
// expected instruc_test[ 6 ]
initial
begin
	instruc_test_expected[6] = 1'bX;
end 
// expected instruc_test[ 5 ]
initial
begin
	instruc_test_expected[5] = 1'bX;
end 
// expected instruc_test[ 4 ]
initial
begin
	instruc_test_expected[4] = 1'bX;
end 
// expected instruc_test[ 3 ]
initial
begin
	instruc_test_expected[3] = 1'bX;
end 
// expected instruc_test[ 2 ]
initial
begin
	instruc_test_expected[2] = 1'bX;
end 
// expected instruc_test[ 1 ]
initial
begin
	instruc_test_expected[1] = 1'bX;
end 
// expected instruc_test[ 0 ]
initial
begin
	instruc_test_expected[0] = 1'bX;
end 
// expected alu_data_out[ 31 ]
initial
begin
	alu_data_out_expected[31] = 1'bX;
end 
// expected alu_data_out[ 30 ]
initial
begin
	alu_data_out_expected[30] = 1'bX;
end 
// expected alu_data_out[ 29 ]
initial
begin
	alu_data_out_expected[29] = 1'bX;
end 
// expected alu_data_out[ 28 ]
initial
begin
	alu_data_out_expected[28] = 1'bX;
end 
// expected alu_data_out[ 27 ]
initial
begin
	alu_data_out_expected[27] = 1'bX;
end 
// expected alu_data_out[ 26 ]
initial
begin
	alu_data_out_expected[26] = 1'bX;
end 
// expected alu_data_out[ 25 ]
initial
begin
	alu_data_out_expected[25] = 1'bX;
end 
// expected alu_data_out[ 24 ]
initial
begin
	alu_data_out_expected[24] = 1'bX;
end 
// expected alu_data_out[ 23 ]
initial
begin
	alu_data_out_expected[23] = 1'bX;
end 
// expected alu_data_out[ 22 ]
initial
begin
	alu_data_out_expected[22] = 1'bX;
end 
// expected alu_data_out[ 21 ]
initial
begin
	alu_data_out_expected[21] = 1'bX;
end 
// expected alu_data_out[ 20 ]
initial
begin
	alu_data_out_expected[20] = 1'bX;
end 
// expected alu_data_out[ 19 ]
initial
begin
	alu_data_out_expected[19] = 1'bX;
end 
// expected alu_data_out[ 18 ]
initial
begin
	alu_data_out_expected[18] = 1'bX;
end 
// expected alu_data_out[ 17 ]
initial
begin
	alu_data_out_expected[17] = 1'bX;
end 
// expected alu_data_out[ 16 ]
initial
begin
	alu_data_out_expected[16] = 1'bX;
end 
// expected alu_data_out[ 15 ]
initial
begin
	alu_data_out_expected[15] = 1'bX;
end 
// expected alu_data_out[ 14 ]
initial
begin
	alu_data_out_expected[14] = 1'bX;
end 
// expected alu_data_out[ 13 ]
initial
begin
	alu_data_out_expected[13] = 1'bX;
end 
// expected alu_data_out[ 12 ]
initial
begin
	alu_data_out_expected[12] = 1'bX;
end 
// expected alu_data_out[ 11 ]
initial
begin
	alu_data_out_expected[11] = 1'bX;
end 
// expected alu_data_out[ 10 ]
initial
begin
	alu_data_out_expected[10] = 1'bX;
end 
// expected alu_data_out[ 9 ]
initial
begin
	alu_data_out_expected[9] = 1'bX;
end 
// expected alu_data_out[ 8 ]
initial
begin
	alu_data_out_expected[8] = 1'bX;
end 
// expected alu_data_out[ 7 ]
initial
begin
	alu_data_out_expected[7] = 1'bX;
end 
// expected alu_data_out[ 6 ]
initial
begin
	alu_data_out_expected[6] = 1'bX;
end 
// expected alu_data_out[ 5 ]
initial
begin
	alu_data_out_expected[5] = 1'bX;
end 
// expected alu_data_out[ 4 ]
initial
begin
	alu_data_out_expected[4] = 1'bX;
end 
// expected alu_data_out[ 3 ]
initial
begin
	alu_data_out_expected[3] = 1'bX;
end 
// expected alu_data_out[ 2 ]
initial
begin
	alu_data_out_expected[2] = 1'bX;
end 
// expected alu_data_out[ 1 ]
initial
begin
	alu_data_out_expected[1] = 1'bX;
end 
// expected alu_data_out[ 0 ]
initial
begin
	alu_data_out_expected[0] = 1'bX;
end 
// expected wb_mux_out[ 31 ]
initial
begin
	wb_mux_out_expected[31] = 1'bX;
end 
// expected wb_mux_out[ 30 ]
initial
begin
	wb_mux_out_expected[30] = 1'bX;
end 
// expected wb_mux_out[ 29 ]
initial
begin
	wb_mux_out_expected[29] = 1'bX;
end 
// expected wb_mux_out[ 28 ]
initial
begin
	wb_mux_out_expected[28] = 1'bX;
end 
// expected wb_mux_out[ 27 ]
initial
begin
	wb_mux_out_expected[27] = 1'bX;
end 
// expected wb_mux_out[ 26 ]
initial
begin
	wb_mux_out_expected[26] = 1'bX;
end 
// expected wb_mux_out[ 25 ]
initial
begin
	wb_mux_out_expected[25] = 1'bX;
end 
// expected wb_mux_out[ 24 ]
initial
begin
	wb_mux_out_expected[24] = 1'bX;
end 
// expected wb_mux_out[ 23 ]
initial
begin
	wb_mux_out_expected[23] = 1'bX;
end 
// expected wb_mux_out[ 22 ]
initial
begin
	wb_mux_out_expected[22] = 1'bX;
end 
// expected wb_mux_out[ 21 ]
initial
begin
	wb_mux_out_expected[21] = 1'bX;
end 
// expected wb_mux_out[ 20 ]
initial
begin
	wb_mux_out_expected[20] = 1'bX;
end 
// expected wb_mux_out[ 19 ]
initial
begin
	wb_mux_out_expected[19] = 1'bX;
end 
// expected wb_mux_out[ 18 ]
initial
begin
	wb_mux_out_expected[18] = 1'bX;
end 
// expected wb_mux_out[ 17 ]
initial
begin
	wb_mux_out_expected[17] = 1'bX;
end 
// expected wb_mux_out[ 16 ]
initial
begin
	wb_mux_out_expected[16] = 1'bX;
end 
// expected wb_mux_out[ 15 ]
initial
begin
	wb_mux_out_expected[15] = 1'bX;
end 
// expected wb_mux_out[ 14 ]
initial
begin
	wb_mux_out_expected[14] = 1'bX;
end 
// expected wb_mux_out[ 13 ]
initial
begin
	wb_mux_out_expected[13] = 1'bX;
end 
// expected wb_mux_out[ 12 ]
initial
begin
	wb_mux_out_expected[12] = 1'bX;
end 
// expected wb_mux_out[ 11 ]
initial
begin
	wb_mux_out_expected[11] = 1'bX;
end 
// expected wb_mux_out[ 10 ]
initial
begin
	wb_mux_out_expected[10] = 1'bX;
end 
// expected wb_mux_out[ 9 ]
initial
begin
	wb_mux_out_expected[9] = 1'bX;
end 
// expected wb_mux_out[ 8 ]
initial
begin
	wb_mux_out_expected[8] = 1'bX;
end 
// expected wb_mux_out[ 7 ]
initial
begin
	wb_mux_out_expected[7] = 1'bX;
end 
// expected wb_mux_out[ 6 ]
initial
begin
	wb_mux_out_expected[6] = 1'bX;
end 
// expected wb_mux_out[ 5 ]
initial
begin
	wb_mux_out_expected[5] = 1'bX;
end 
// expected wb_mux_out[ 4 ]
initial
begin
	wb_mux_out_expected[4] = 1'bX;
end 
// expected wb_mux_out[ 3 ]
initial
begin
	wb_mux_out_expected[3] = 1'bX;
end 
// expected wb_mux_out[ 2 ]
initial
begin
	wb_mux_out_expected[2] = 1'bX;
end 
// expected wb_mux_out[ 1 ]
initial
begin
	wb_mux_out_expected[1] = 1'bX;
end 
// expected wb_mux_out[ 0 ]
initial
begin
	wb_mux_out_expected[0] = 1'bX;
end 
// expected io_hex0[ 6 ]
initial
begin
	io_hex0_expected[6] = 1'bX;
end 
// expected io_hex0[ 5 ]
initial
begin
	io_hex0_expected[5] = 1'bX;
end 
// expected io_hex0[ 4 ]
initial
begin
	io_hex0_expected[4] = 1'bX;
end 
// expected io_hex0[ 3 ]
initial
begin
	io_hex0_expected[3] = 1'bX;
end 
// expected io_hex0[ 2 ]
initial
begin
	io_hex0_expected[2] = 1'bX;
end 
// expected io_hex0[ 1 ]
initial
begin
	io_hex0_expected[1] = 1'bX;
end 
// expected io_hex0[ 0 ]
initial
begin
	io_hex0_expected[0] = 1'bX;
end 
// expected io_hex1[ 6 ]
initial
begin
	io_hex1_expected[6] = 1'bX;
end 
// expected io_hex1[ 5 ]
initial
begin
	io_hex1_expected[5] = 1'bX;
end 
// expected io_hex1[ 4 ]
initial
begin
	io_hex1_expected[4] = 1'bX;
end 
// expected io_hex1[ 3 ]
initial
begin
	io_hex1_expected[3] = 1'bX;
end 
// expected io_hex1[ 2 ]
initial
begin
	io_hex1_expected[2] = 1'bX;
end 
// expected io_hex1[ 1 ]
initial
begin
	io_hex1_expected[1] = 1'bX;
end 
// expected io_hex1[ 0 ]
initial
begin
	io_hex1_expected[0] = 1'bX;
end 
// expected io_hex2[ 6 ]
initial
begin
	io_hex2_expected[6] = 1'bX;
end 
// expected io_hex2[ 5 ]
initial
begin
	io_hex2_expected[5] = 1'bX;
end 
// expected io_hex2[ 4 ]
initial
begin
	io_hex2_expected[4] = 1'bX;
end 
// expected io_hex2[ 3 ]
initial
begin
	io_hex2_expected[3] = 1'bX;
end 
// expected io_hex2[ 2 ]
initial
begin
	io_hex2_expected[2] = 1'bX;
end 
// expected io_hex2[ 1 ]
initial
begin
	io_hex2_expected[1] = 1'bX;
end 
// expected io_hex2[ 0 ]
initial
begin
	io_hex2_expected[0] = 1'bX;
end 
// expected io_hex3[ 6 ]
initial
begin
	io_hex3_expected[6] = 1'bX;
end 
// expected io_hex3[ 5 ]
initial
begin
	io_hex3_expected[5] = 1'bX;
end 
// expected io_hex3[ 4 ]
initial
begin
	io_hex3_expected[4] = 1'bX;
end 
// expected io_hex3[ 3 ]
initial
begin
	io_hex3_expected[3] = 1'bX;
end 
// expected io_hex3[ 2 ]
initial
begin
	io_hex3_expected[2] = 1'bX;
end 
// expected io_hex3[ 1 ]
initial
begin
	io_hex3_expected[1] = 1'bX;
end 
// expected io_hex3[ 0 ]
initial
begin
	io_hex3_expected[0] = 1'bX;
end 
// expected io_hex4[ 6 ]
initial
begin
	io_hex4_expected[6] = 1'bX;
end 
// expected io_hex4[ 5 ]
initial
begin
	io_hex4_expected[5] = 1'bX;
end 
// expected io_hex4[ 4 ]
initial
begin
	io_hex4_expected[4] = 1'bX;
end 
// expected io_hex4[ 3 ]
initial
begin
	io_hex4_expected[3] = 1'bX;
end 
// expected io_hex4[ 2 ]
initial
begin
	io_hex4_expected[2] = 1'bX;
end 
// expected io_hex4[ 1 ]
initial
begin
	io_hex4_expected[1] = 1'bX;
end 
// expected io_hex4[ 0 ]
initial
begin
	io_hex4_expected[0] = 1'bX;
end 
// expected io_hex5[ 6 ]
initial
begin
	io_hex5_expected[6] = 1'bX;
end 
// expected io_hex5[ 5 ]
initial
begin
	io_hex5_expected[5] = 1'bX;
end 
// expected io_hex5[ 4 ]
initial
begin
	io_hex5_expected[4] = 1'bX;
end 
// expected io_hex5[ 3 ]
initial
begin
	io_hex5_expected[3] = 1'bX;
end 
// expected io_hex5[ 2 ]
initial
begin
	io_hex5_expected[2] = 1'bX;
end 
// expected io_hex5[ 1 ]
initial
begin
	io_hex5_expected[1] = 1'bX;
end 
// expected io_hex5[ 0 ]
initial
begin
	io_hex5_expected[0] = 1'bX;
end 
// expected io_hex6[ 6 ]
initial
begin
	io_hex6_expected[6] = 1'bX;
end 
// expected io_hex6[ 5 ]
initial
begin
	io_hex6_expected[5] = 1'bX;
end 
// expected io_hex6[ 4 ]
initial
begin
	io_hex6_expected[4] = 1'bX;
end 
// expected io_hex6[ 3 ]
initial
begin
	io_hex6_expected[3] = 1'bX;
end 
// expected io_hex6[ 2 ]
initial
begin
	io_hex6_expected[2] = 1'bX;
end 
// expected io_hex6[ 1 ]
initial
begin
	io_hex6_expected[1] = 1'bX;
end 
// expected io_hex6[ 0 ]
initial
begin
	io_hex6_expected[0] = 1'bX;
end 
// expected io_hex7[ 6 ]
initial
begin
	io_hex7_expected[6] = 1'bX;
end 
// expected io_hex7[ 5 ]
initial
begin
	io_hex7_expected[5] = 1'bX;
end 
// expected io_hex7[ 4 ]
initial
begin
	io_hex7_expected[4] = 1'bX;
end 
// expected io_hex7[ 3 ]
initial
begin
	io_hex7_expected[3] = 1'bX;
end 
// expected io_hex7[ 2 ]
initial
begin
	io_hex7_expected[2] = 1'bX;
end 
// expected io_hex7[ 1 ]
initial
begin
	io_hex7_expected[1] = 1'bX;
end 
// expected io_hex7[ 0 ]
initial
begin
	io_hex7_expected[0] = 1'bX;
end 
// expected io_lcd[ 7 ]
initial
begin
	io_lcd_expected[7] = 1'bX;
end 
// expected io_lcd[ 6 ]
initial
begin
	io_lcd_expected[6] = 1'bX;
end 
// expected io_lcd[ 5 ]
initial
begin
	io_lcd_expected[5] = 1'bX;
end 
// expected io_lcd[ 4 ]
initial
begin
	io_lcd_expected[4] = 1'bX;
end 
// expected io_lcd[ 3 ]
initial
begin
	io_lcd_expected[3] = 1'bX;
end 
// expected io_lcd[ 2 ]
initial
begin
	io_lcd_expected[2] = 1'bX;
end 
// expected io_lcd[ 1 ]
initial
begin
	io_lcd_expected[1] = 1'bX;
end 
// expected io_lcd[ 0 ]
initial
begin
	io_lcd_expected[0] = 1'bX;
end 
// expected io_ledg[ 8 ]
initial
begin
	io_ledg_expected[8] = 1'bX;
end 
// expected io_ledg[ 7 ]
initial
begin
	io_ledg_expected[7] = 1'bX;
end 
// expected io_ledg[ 6 ]
initial
begin
	io_ledg_expected[6] = 1'bX;
end 
// expected io_ledg[ 5 ]
initial
begin
	io_ledg_expected[5] = 1'bX;
end 
// expected io_ledg[ 4 ]
initial
begin
	io_ledg_expected[4] = 1'bX;
end 
// expected io_ledg[ 3 ]
initial
begin
	io_ledg_expected[3] = 1'bX;
end 
// expected io_ledg[ 2 ]
initial
begin
	io_ledg_expected[2] = 1'bX;
end 
// expected io_ledg[ 1 ]
initial
begin
	io_ledg_expected[1] = 1'bX;
end 
// expected io_ledg[ 0 ]
initial
begin
	io_ledg_expected[0] = 1'bX;
end 
// expected io_ledr[ 17 ]
initial
begin
	io_ledr_expected[17] = 1'bX;
end 
// expected io_ledr[ 16 ]
initial
begin
	io_ledr_expected[16] = 1'bX;
end 
// expected io_ledr[ 15 ]
initial
begin
	io_ledr_expected[15] = 1'bX;
end 
// expected io_ledr[ 14 ]
initial
begin
	io_ledr_expected[14] = 1'bX;
end 
// expected io_ledr[ 13 ]
initial
begin
	io_ledr_expected[13] = 1'bX;
end 
// expected io_ledr[ 12 ]
initial
begin
	io_ledr_expected[12] = 1'bX;
end 
// expected io_ledr[ 11 ]
initial
begin
	io_ledr_expected[11] = 1'bX;
end 
// expected io_ledr[ 10 ]
initial
begin
	io_ledr_expected[10] = 1'bX;
end 
// expected io_ledr[ 9 ]
initial
begin
	io_ledr_expected[9] = 1'bX;
end 
// expected io_ledr[ 8 ]
initial
begin
	io_ledr_expected[8] = 1'bX;
end 
// expected io_ledr[ 7 ]
initial
begin
	io_ledr_expected[7] = 1'bX;
end 
// expected io_ledr[ 6 ]
initial
begin
	io_ledr_expected[6] = 1'bX;
end 
// expected io_ledr[ 5 ]
initial
begin
	io_ledr_expected[5] = 1'bX;
end 
// expected io_ledr[ 4 ]
initial
begin
	io_ledr_expected[4] = 1'bX;
end 
// expected io_ledr[ 3 ]
initial
begin
	io_ledr_expected[3] = 1'bX;
end 
// expected io_ledr[ 2 ]
initial
begin
	io_ledr_expected[2] = 1'bX;
end 
// expected io_ledr[ 1 ]
initial
begin
	io_ledr_expected[1] = 1'bX;
end 
// expected io_ledr[ 0 ]
initial
begin
	io_ledr_expected[0] = 1'bX;
end 
// expected rs2[ 4 ]
initial
begin
	rs2_expected[4] = 1'bX;
end 
// expected rs2[ 3 ]
initial
begin
	rs2_expected[3] = 1'bX;
end 
// expected rs2[ 2 ]
initial
begin
	rs2_expected[2] = 1'bX;
end 
// expected rs2[ 1 ]
initial
begin
	rs2_expected[1] = 1'bX;
end 
// expected rs2[ 0 ]
initial
begin
	rs2_expected[0] = 1'bX;
end 
// expected rs1[ 4 ]
initial
begin
	rs1_expected[4] = 1'bX;
end 
// expected rs1[ 3 ]
initial
begin
	rs1_expected[3] = 1'bX;
end 
// expected rs1[ 2 ]
initial
begin
	rs1_expected[2] = 1'bX;
end 
// expected rs1[ 1 ]
initial
begin
	rs1_expected[1] = 1'bX;
end 
// expected rs1[ 0 ]
initial
begin
	rs1_expected[0] = 1'bX;
end 

// expected branch_signal
initial
begin
	branch_signal_expected = 1'bX;
end 
// generate trigger
always @(alu_data_out_expected or alu_data_out or branch_signal_expected or branch_signal or instruc_test_expected or instruc_test or io_hex0_expected or io_hex0 or io_hex1_expected or io_hex1 or io_hex2_expected or io_hex2 or io_hex3_expected or io_hex3 or io_hex4_expected or io_hex4 or io_hex5_expected or io_hex5 or io_hex6_expected or io_hex6 or io_hex7_expected or io_hex7 or io_lcd_expected or io_lcd or io_ledg_expected or io_ledg or io_ledr_expected or io_ledr or pc_debug_expected or pc_debug or rs1_expected or rs1 or rs2_expected or rs2 or wb_mux_out_expected or wb_mux_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_data_out = %b | expected branch_signal = %b | expected instruc_test = %b | expected io_hex0 = %b | expected io_hex1 = %b | expected io_hex2 = %b | expected io_hex3 = %b | expected io_hex4 = %b | expected io_hex5 = %b | expected io_hex6 = %b | expected io_hex7 = %b | expected io_lcd = %b | expected io_ledg = %b | expected io_ledr = %b | expected pc_debug = %b | expected rs1 = %b | expected rs2 = %b | expected wb_mux_out = %b | ",alu_data_out_expected_prev,branch_signal_expected_prev,instruc_test_expected_prev,io_hex0_expected_prev,io_hex1_expected_prev,io_hex2_expected_prev,io_hex3_expected_prev,io_hex4_expected_prev,io_hex5_expected_prev,io_hex6_expected_prev,io_hex7_expected_prev,io_lcd_expected_prev,io_ledg_expected_prev,io_ledr_expected_prev,pc_debug_expected_prev,rs1_expected_prev,rs2_expected_prev,wb_mux_out_expected_prev);
	$display("| real alu_data_out = %b | real branch_signal = %b | real instruc_test = %b | real io_hex0 = %b | real io_hex1 = %b | real io_hex2 = %b | real io_hex3 = %b | real io_hex4 = %b | real io_hex5 = %b | real io_hex6 = %b | real io_hex7 = %b | real io_lcd = %b | real io_ledg = %b | real io_ledr = %b | real pc_debug = %b | real rs1 = %b | real rs2 = %b | real wb_mux_out = %b | ",alu_data_out_prev,branch_signal_prev,instruc_test_prev,io_hex0_prev,io_hex1_prev,io_hex2_prev,io_hex3_prev,io_hex4_prev,io_hex5_prev,io_hex6_prev,io_hex7_prev,io_lcd_prev,io_ledg_prev,io_ledr_prev,pc_debug_prev,rs1_prev,rs2_prev,wb_mux_out_prev);
`endif
	if (
		( alu_data_out_expected_prev[0] !== 1'bx ) && ( alu_data_out_prev[0] !== alu_data_out_expected_prev[0] )
		&& ((alu_data_out_expected_prev[0] !== last_alu_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[0] = alu_data_out_expected_prev[0];
	end
	if (
		( alu_data_out_expected_prev[1] !== 1'bx ) && ( alu_data_out_prev[1] !== alu_data_out_expected_prev[1] )
		&& ((alu_data_out_expected_prev[1] !== last_alu_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[1] = alu_data_out_expected_prev[1];
	end
	if (
		( alu_data_out_expected_prev[2] !== 1'bx ) && ( alu_data_out_prev[2] !== alu_data_out_expected_prev[2] )
		&& ((alu_data_out_expected_prev[2] !== last_alu_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[2] = alu_data_out_expected_prev[2];
	end
	if (
		( alu_data_out_expected_prev[3] !== 1'bx ) && ( alu_data_out_prev[3] !== alu_data_out_expected_prev[3] )
		&& ((alu_data_out_expected_prev[3] !== last_alu_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[3] = alu_data_out_expected_prev[3];
	end
	if (
		( alu_data_out_expected_prev[4] !== 1'bx ) && ( alu_data_out_prev[4] !== alu_data_out_expected_prev[4] )
		&& ((alu_data_out_expected_prev[4] !== last_alu_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[4] = alu_data_out_expected_prev[4];
	end
	if (
		( alu_data_out_expected_prev[5] !== 1'bx ) && ( alu_data_out_prev[5] !== alu_data_out_expected_prev[5] )
		&& ((alu_data_out_expected_prev[5] !== last_alu_data_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[5] = alu_data_out_expected_prev[5];
	end
	if (
		( alu_data_out_expected_prev[6] !== 1'bx ) && ( alu_data_out_prev[6] !== alu_data_out_expected_prev[6] )
		&& ((alu_data_out_expected_prev[6] !== last_alu_data_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[6] = alu_data_out_expected_prev[6];
	end
	if (
		( alu_data_out_expected_prev[7] !== 1'bx ) && ( alu_data_out_prev[7] !== alu_data_out_expected_prev[7] )
		&& ((alu_data_out_expected_prev[7] !== last_alu_data_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[7] = alu_data_out_expected_prev[7];
	end
	if (
		( alu_data_out_expected_prev[8] !== 1'bx ) && ( alu_data_out_prev[8] !== alu_data_out_expected_prev[8] )
		&& ((alu_data_out_expected_prev[8] !== last_alu_data_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[8] = alu_data_out_expected_prev[8];
	end
	if (
		( alu_data_out_expected_prev[9] !== 1'bx ) && ( alu_data_out_prev[9] !== alu_data_out_expected_prev[9] )
		&& ((alu_data_out_expected_prev[9] !== last_alu_data_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[9] = alu_data_out_expected_prev[9];
	end
	if (
		( alu_data_out_expected_prev[10] !== 1'bx ) && ( alu_data_out_prev[10] !== alu_data_out_expected_prev[10] )
		&& ((alu_data_out_expected_prev[10] !== last_alu_data_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[10] = alu_data_out_expected_prev[10];
	end
	if (
		( alu_data_out_expected_prev[11] !== 1'bx ) && ( alu_data_out_prev[11] !== alu_data_out_expected_prev[11] )
		&& ((alu_data_out_expected_prev[11] !== last_alu_data_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[11] = alu_data_out_expected_prev[11];
	end
	if (
		( alu_data_out_expected_prev[12] !== 1'bx ) && ( alu_data_out_prev[12] !== alu_data_out_expected_prev[12] )
		&& ((alu_data_out_expected_prev[12] !== last_alu_data_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[12] = alu_data_out_expected_prev[12];
	end
	if (
		( alu_data_out_expected_prev[13] !== 1'bx ) && ( alu_data_out_prev[13] !== alu_data_out_expected_prev[13] )
		&& ((alu_data_out_expected_prev[13] !== last_alu_data_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[13] = alu_data_out_expected_prev[13];
	end
	if (
		( alu_data_out_expected_prev[14] !== 1'bx ) && ( alu_data_out_prev[14] !== alu_data_out_expected_prev[14] )
		&& ((alu_data_out_expected_prev[14] !== last_alu_data_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[14] = alu_data_out_expected_prev[14];
	end
	if (
		( alu_data_out_expected_prev[15] !== 1'bx ) && ( alu_data_out_prev[15] !== alu_data_out_expected_prev[15] )
		&& ((alu_data_out_expected_prev[15] !== last_alu_data_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[15] = alu_data_out_expected_prev[15];
	end
	if (
		( alu_data_out_expected_prev[16] !== 1'bx ) && ( alu_data_out_prev[16] !== alu_data_out_expected_prev[16] )
		&& ((alu_data_out_expected_prev[16] !== last_alu_data_out_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[16] = alu_data_out_expected_prev[16];
	end
	if (
		( alu_data_out_expected_prev[17] !== 1'bx ) && ( alu_data_out_prev[17] !== alu_data_out_expected_prev[17] )
		&& ((alu_data_out_expected_prev[17] !== last_alu_data_out_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[17] = alu_data_out_expected_prev[17];
	end
	if (
		( alu_data_out_expected_prev[18] !== 1'bx ) && ( alu_data_out_prev[18] !== alu_data_out_expected_prev[18] )
		&& ((alu_data_out_expected_prev[18] !== last_alu_data_out_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[18] = alu_data_out_expected_prev[18];
	end
	if (
		( alu_data_out_expected_prev[19] !== 1'bx ) && ( alu_data_out_prev[19] !== alu_data_out_expected_prev[19] )
		&& ((alu_data_out_expected_prev[19] !== last_alu_data_out_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[19] = alu_data_out_expected_prev[19];
	end
	if (
		( alu_data_out_expected_prev[20] !== 1'bx ) && ( alu_data_out_prev[20] !== alu_data_out_expected_prev[20] )
		&& ((alu_data_out_expected_prev[20] !== last_alu_data_out_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[20] = alu_data_out_expected_prev[20];
	end
	if (
		( alu_data_out_expected_prev[21] !== 1'bx ) && ( alu_data_out_prev[21] !== alu_data_out_expected_prev[21] )
		&& ((alu_data_out_expected_prev[21] !== last_alu_data_out_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[21] = alu_data_out_expected_prev[21];
	end
	if (
		( alu_data_out_expected_prev[22] !== 1'bx ) && ( alu_data_out_prev[22] !== alu_data_out_expected_prev[22] )
		&& ((alu_data_out_expected_prev[22] !== last_alu_data_out_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[22] = alu_data_out_expected_prev[22];
	end
	if (
		( alu_data_out_expected_prev[23] !== 1'bx ) && ( alu_data_out_prev[23] !== alu_data_out_expected_prev[23] )
		&& ((alu_data_out_expected_prev[23] !== last_alu_data_out_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[23] = alu_data_out_expected_prev[23];
	end
	if (
		( alu_data_out_expected_prev[24] !== 1'bx ) && ( alu_data_out_prev[24] !== alu_data_out_expected_prev[24] )
		&& ((alu_data_out_expected_prev[24] !== last_alu_data_out_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[24] = alu_data_out_expected_prev[24];
	end
	if (
		( alu_data_out_expected_prev[25] !== 1'bx ) && ( alu_data_out_prev[25] !== alu_data_out_expected_prev[25] )
		&& ((alu_data_out_expected_prev[25] !== last_alu_data_out_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[25] = alu_data_out_expected_prev[25];
	end
	if (
		( alu_data_out_expected_prev[26] !== 1'bx ) && ( alu_data_out_prev[26] !== alu_data_out_expected_prev[26] )
		&& ((alu_data_out_expected_prev[26] !== last_alu_data_out_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[26] = alu_data_out_expected_prev[26];
	end
	if (
		( alu_data_out_expected_prev[27] !== 1'bx ) && ( alu_data_out_prev[27] !== alu_data_out_expected_prev[27] )
		&& ((alu_data_out_expected_prev[27] !== last_alu_data_out_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[27] = alu_data_out_expected_prev[27];
	end
	if (
		( alu_data_out_expected_prev[28] !== 1'bx ) && ( alu_data_out_prev[28] !== alu_data_out_expected_prev[28] )
		&& ((alu_data_out_expected_prev[28] !== last_alu_data_out_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[28] = alu_data_out_expected_prev[28];
	end
	if (
		( alu_data_out_expected_prev[29] !== 1'bx ) && ( alu_data_out_prev[29] !== alu_data_out_expected_prev[29] )
		&& ((alu_data_out_expected_prev[29] !== last_alu_data_out_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[29] = alu_data_out_expected_prev[29];
	end
	if (
		( alu_data_out_expected_prev[30] !== 1'bx ) && ( alu_data_out_prev[30] !== alu_data_out_expected_prev[30] )
		&& ((alu_data_out_expected_prev[30] !== last_alu_data_out_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[30] = alu_data_out_expected_prev[30];
	end
	if (
		( alu_data_out_expected_prev[31] !== 1'bx ) && ( alu_data_out_prev[31] !== alu_data_out_expected_prev[31] )
		&& ((alu_data_out_expected_prev[31] !== last_alu_data_out_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_out_expected_prev);
		$display ("     Real value = %b", alu_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_data_out_exp[31] = alu_data_out_expected_prev[31];
	end
	if (
		( branch_signal_expected_prev !== 1'bx ) && ( branch_signal_prev !== branch_signal_expected_prev )
		&& ((branch_signal_expected_prev !== last_branch_signal_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_signal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_signal_expected_prev);
		$display ("     Real value = %b", branch_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branch_signal_exp = branch_signal_expected_prev;
	end
	if (
		( instruc_test_expected_prev[0] !== 1'bx ) && ( instruc_test_prev[0] !== instruc_test_expected_prev[0] )
		&& ((instruc_test_expected_prev[0] !== last_instruc_test_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[0] = instruc_test_expected_prev[0];
	end
	if (
		( instruc_test_expected_prev[1] !== 1'bx ) && ( instruc_test_prev[1] !== instruc_test_expected_prev[1] )
		&& ((instruc_test_expected_prev[1] !== last_instruc_test_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[1] = instruc_test_expected_prev[1];
	end
	if (
		( instruc_test_expected_prev[2] !== 1'bx ) && ( instruc_test_prev[2] !== instruc_test_expected_prev[2] )
		&& ((instruc_test_expected_prev[2] !== last_instruc_test_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[2] = instruc_test_expected_prev[2];
	end
	if (
		( instruc_test_expected_prev[3] !== 1'bx ) && ( instruc_test_prev[3] !== instruc_test_expected_prev[3] )
		&& ((instruc_test_expected_prev[3] !== last_instruc_test_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[3] = instruc_test_expected_prev[3];
	end
	if (
		( instruc_test_expected_prev[4] !== 1'bx ) && ( instruc_test_prev[4] !== instruc_test_expected_prev[4] )
		&& ((instruc_test_expected_prev[4] !== last_instruc_test_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[4] = instruc_test_expected_prev[4];
	end
	if (
		( instruc_test_expected_prev[5] !== 1'bx ) && ( instruc_test_prev[5] !== instruc_test_expected_prev[5] )
		&& ((instruc_test_expected_prev[5] !== last_instruc_test_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[5] = instruc_test_expected_prev[5];
	end
	if (
		( instruc_test_expected_prev[6] !== 1'bx ) && ( instruc_test_prev[6] !== instruc_test_expected_prev[6] )
		&& ((instruc_test_expected_prev[6] !== last_instruc_test_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[6] = instruc_test_expected_prev[6];
	end
	if (
		( instruc_test_expected_prev[7] !== 1'bx ) && ( instruc_test_prev[7] !== instruc_test_expected_prev[7] )
		&& ((instruc_test_expected_prev[7] !== last_instruc_test_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[7] = instruc_test_expected_prev[7];
	end
	if (
		( instruc_test_expected_prev[8] !== 1'bx ) && ( instruc_test_prev[8] !== instruc_test_expected_prev[8] )
		&& ((instruc_test_expected_prev[8] !== last_instruc_test_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[8] = instruc_test_expected_prev[8];
	end
	if (
		( instruc_test_expected_prev[9] !== 1'bx ) && ( instruc_test_prev[9] !== instruc_test_expected_prev[9] )
		&& ((instruc_test_expected_prev[9] !== last_instruc_test_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[9] = instruc_test_expected_prev[9];
	end
	if (
		( instruc_test_expected_prev[10] !== 1'bx ) && ( instruc_test_prev[10] !== instruc_test_expected_prev[10] )
		&& ((instruc_test_expected_prev[10] !== last_instruc_test_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[10] = instruc_test_expected_prev[10];
	end
	if (
		( instruc_test_expected_prev[11] !== 1'bx ) && ( instruc_test_prev[11] !== instruc_test_expected_prev[11] )
		&& ((instruc_test_expected_prev[11] !== last_instruc_test_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[11] = instruc_test_expected_prev[11];
	end
	if (
		( instruc_test_expected_prev[12] !== 1'bx ) && ( instruc_test_prev[12] !== instruc_test_expected_prev[12] )
		&& ((instruc_test_expected_prev[12] !== last_instruc_test_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[12] = instruc_test_expected_prev[12];
	end
	if (
		( instruc_test_expected_prev[13] !== 1'bx ) && ( instruc_test_prev[13] !== instruc_test_expected_prev[13] )
		&& ((instruc_test_expected_prev[13] !== last_instruc_test_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[13] = instruc_test_expected_prev[13];
	end
	if (
		( instruc_test_expected_prev[14] !== 1'bx ) && ( instruc_test_prev[14] !== instruc_test_expected_prev[14] )
		&& ((instruc_test_expected_prev[14] !== last_instruc_test_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[14] = instruc_test_expected_prev[14];
	end
	if (
		( instruc_test_expected_prev[15] !== 1'bx ) && ( instruc_test_prev[15] !== instruc_test_expected_prev[15] )
		&& ((instruc_test_expected_prev[15] !== last_instruc_test_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[15] = instruc_test_expected_prev[15];
	end
	if (
		( instruc_test_expected_prev[16] !== 1'bx ) && ( instruc_test_prev[16] !== instruc_test_expected_prev[16] )
		&& ((instruc_test_expected_prev[16] !== last_instruc_test_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[16] = instruc_test_expected_prev[16];
	end
	if (
		( instruc_test_expected_prev[17] !== 1'bx ) && ( instruc_test_prev[17] !== instruc_test_expected_prev[17] )
		&& ((instruc_test_expected_prev[17] !== last_instruc_test_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[17] = instruc_test_expected_prev[17];
	end
	if (
		( instruc_test_expected_prev[18] !== 1'bx ) && ( instruc_test_prev[18] !== instruc_test_expected_prev[18] )
		&& ((instruc_test_expected_prev[18] !== last_instruc_test_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[18] = instruc_test_expected_prev[18];
	end
	if (
		( instruc_test_expected_prev[19] !== 1'bx ) && ( instruc_test_prev[19] !== instruc_test_expected_prev[19] )
		&& ((instruc_test_expected_prev[19] !== last_instruc_test_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[19] = instruc_test_expected_prev[19];
	end
	if (
		( instruc_test_expected_prev[20] !== 1'bx ) && ( instruc_test_prev[20] !== instruc_test_expected_prev[20] )
		&& ((instruc_test_expected_prev[20] !== last_instruc_test_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[20] = instruc_test_expected_prev[20];
	end
	if (
		( instruc_test_expected_prev[21] !== 1'bx ) && ( instruc_test_prev[21] !== instruc_test_expected_prev[21] )
		&& ((instruc_test_expected_prev[21] !== last_instruc_test_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[21] = instruc_test_expected_prev[21];
	end
	if (
		( instruc_test_expected_prev[22] !== 1'bx ) && ( instruc_test_prev[22] !== instruc_test_expected_prev[22] )
		&& ((instruc_test_expected_prev[22] !== last_instruc_test_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[22] = instruc_test_expected_prev[22];
	end
	if (
		( instruc_test_expected_prev[23] !== 1'bx ) && ( instruc_test_prev[23] !== instruc_test_expected_prev[23] )
		&& ((instruc_test_expected_prev[23] !== last_instruc_test_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[23] = instruc_test_expected_prev[23];
	end
	if (
		( instruc_test_expected_prev[24] !== 1'bx ) && ( instruc_test_prev[24] !== instruc_test_expected_prev[24] )
		&& ((instruc_test_expected_prev[24] !== last_instruc_test_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[24] = instruc_test_expected_prev[24];
	end
	if (
		( instruc_test_expected_prev[25] !== 1'bx ) && ( instruc_test_prev[25] !== instruc_test_expected_prev[25] )
		&& ((instruc_test_expected_prev[25] !== last_instruc_test_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[25] = instruc_test_expected_prev[25];
	end
	if (
		( instruc_test_expected_prev[26] !== 1'bx ) && ( instruc_test_prev[26] !== instruc_test_expected_prev[26] )
		&& ((instruc_test_expected_prev[26] !== last_instruc_test_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[26] = instruc_test_expected_prev[26];
	end
	if (
		( instruc_test_expected_prev[27] !== 1'bx ) && ( instruc_test_prev[27] !== instruc_test_expected_prev[27] )
		&& ((instruc_test_expected_prev[27] !== last_instruc_test_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[27] = instruc_test_expected_prev[27];
	end
	if (
		( instruc_test_expected_prev[28] !== 1'bx ) && ( instruc_test_prev[28] !== instruc_test_expected_prev[28] )
		&& ((instruc_test_expected_prev[28] !== last_instruc_test_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[28] = instruc_test_expected_prev[28];
	end
	if (
		( instruc_test_expected_prev[29] !== 1'bx ) && ( instruc_test_prev[29] !== instruc_test_expected_prev[29] )
		&& ((instruc_test_expected_prev[29] !== last_instruc_test_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[29] = instruc_test_expected_prev[29];
	end
	if (
		( instruc_test_expected_prev[30] !== 1'bx ) && ( instruc_test_prev[30] !== instruc_test_expected_prev[30] )
		&& ((instruc_test_expected_prev[30] !== last_instruc_test_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[30] = instruc_test_expected_prev[30];
	end
	if (
		( instruc_test_expected_prev[31] !== 1'bx ) && ( instruc_test_prev[31] !== instruc_test_expected_prev[31] )
		&& ((instruc_test_expected_prev[31] !== last_instruc_test_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruc_test[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruc_test_expected_prev);
		$display ("     Real value = %b", instruc_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_instruc_test_exp[31] = instruc_test_expected_prev[31];
	end
	if (
		( io_hex0_expected_prev[0] !== 1'bx ) && ( io_hex0_prev[0] !== io_hex0_expected_prev[0] )
		&& ((io_hex0_expected_prev[0] !== last_io_hex0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[0] = io_hex0_expected_prev[0];
	end
	if (
		( io_hex0_expected_prev[1] !== 1'bx ) && ( io_hex0_prev[1] !== io_hex0_expected_prev[1] )
		&& ((io_hex0_expected_prev[1] !== last_io_hex0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[1] = io_hex0_expected_prev[1];
	end
	if (
		( io_hex0_expected_prev[2] !== 1'bx ) && ( io_hex0_prev[2] !== io_hex0_expected_prev[2] )
		&& ((io_hex0_expected_prev[2] !== last_io_hex0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[2] = io_hex0_expected_prev[2];
	end
	if (
		( io_hex0_expected_prev[3] !== 1'bx ) && ( io_hex0_prev[3] !== io_hex0_expected_prev[3] )
		&& ((io_hex0_expected_prev[3] !== last_io_hex0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[3] = io_hex0_expected_prev[3];
	end
	if (
		( io_hex0_expected_prev[4] !== 1'bx ) && ( io_hex0_prev[4] !== io_hex0_expected_prev[4] )
		&& ((io_hex0_expected_prev[4] !== last_io_hex0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[4] = io_hex0_expected_prev[4];
	end
	if (
		( io_hex0_expected_prev[5] !== 1'bx ) && ( io_hex0_prev[5] !== io_hex0_expected_prev[5] )
		&& ((io_hex0_expected_prev[5] !== last_io_hex0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[5] = io_hex0_expected_prev[5];
	end
	if (
		( io_hex0_expected_prev[6] !== 1'bx ) && ( io_hex0_prev[6] !== io_hex0_expected_prev[6] )
		&& ((io_hex0_expected_prev[6] !== last_io_hex0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex0_exp[6] = io_hex0_expected_prev[6];
	end
	if (
		( io_hex1_expected_prev[0] !== 1'bx ) && ( io_hex1_prev[0] !== io_hex1_expected_prev[0] )
		&& ((io_hex1_expected_prev[0] !== last_io_hex1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[0] = io_hex1_expected_prev[0];
	end
	if (
		( io_hex1_expected_prev[1] !== 1'bx ) && ( io_hex1_prev[1] !== io_hex1_expected_prev[1] )
		&& ((io_hex1_expected_prev[1] !== last_io_hex1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[1] = io_hex1_expected_prev[1];
	end
	if (
		( io_hex1_expected_prev[2] !== 1'bx ) && ( io_hex1_prev[2] !== io_hex1_expected_prev[2] )
		&& ((io_hex1_expected_prev[2] !== last_io_hex1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[2] = io_hex1_expected_prev[2];
	end
	if (
		( io_hex1_expected_prev[3] !== 1'bx ) && ( io_hex1_prev[3] !== io_hex1_expected_prev[3] )
		&& ((io_hex1_expected_prev[3] !== last_io_hex1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[3] = io_hex1_expected_prev[3];
	end
	if (
		( io_hex1_expected_prev[4] !== 1'bx ) && ( io_hex1_prev[4] !== io_hex1_expected_prev[4] )
		&& ((io_hex1_expected_prev[4] !== last_io_hex1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[4] = io_hex1_expected_prev[4];
	end
	if (
		( io_hex1_expected_prev[5] !== 1'bx ) && ( io_hex1_prev[5] !== io_hex1_expected_prev[5] )
		&& ((io_hex1_expected_prev[5] !== last_io_hex1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[5] = io_hex1_expected_prev[5];
	end
	if (
		( io_hex1_expected_prev[6] !== 1'bx ) && ( io_hex1_prev[6] !== io_hex1_expected_prev[6] )
		&& ((io_hex1_expected_prev[6] !== last_io_hex1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex1_exp[6] = io_hex1_expected_prev[6];
	end
	if (
		( io_hex2_expected_prev[0] !== 1'bx ) && ( io_hex2_prev[0] !== io_hex2_expected_prev[0] )
		&& ((io_hex2_expected_prev[0] !== last_io_hex2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[0] = io_hex2_expected_prev[0];
	end
	if (
		( io_hex2_expected_prev[1] !== 1'bx ) && ( io_hex2_prev[1] !== io_hex2_expected_prev[1] )
		&& ((io_hex2_expected_prev[1] !== last_io_hex2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[1] = io_hex2_expected_prev[1];
	end
	if (
		( io_hex2_expected_prev[2] !== 1'bx ) && ( io_hex2_prev[2] !== io_hex2_expected_prev[2] )
		&& ((io_hex2_expected_prev[2] !== last_io_hex2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[2] = io_hex2_expected_prev[2];
	end
	if (
		( io_hex2_expected_prev[3] !== 1'bx ) && ( io_hex2_prev[3] !== io_hex2_expected_prev[3] )
		&& ((io_hex2_expected_prev[3] !== last_io_hex2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[3] = io_hex2_expected_prev[3];
	end
	if (
		( io_hex2_expected_prev[4] !== 1'bx ) && ( io_hex2_prev[4] !== io_hex2_expected_prev[4] )
		&& ((io_hex2_expected_prev[4] !== last_io_hex2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[4] = io_hex2_expected_prev[4];
	end
	if (
		( io_hex2_expected_prev[5] !== 1'bx ) && ( io_hex2_prev[5] !== io_hex2_expected_prev[5] )
		&& ((io_hex2_expected_prev[5] !== last_io_hex2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[5] = io_hex2_expected_prev[5];
	end
	if (
		( io_hex2_expected_prev[6] !== 1'bx ) && ( io_hex2_prev[6] !== io_hex2_expected_prev[6] )
		&& ((io_hex2_expected_prev[6] !== last_io_hex2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex2_exp[6] = io_hex2_expected_prev[6];
	end
	if (
		( io_hex3_expected_prev[0] !== 1'bx ) && ( io_hex3_prev[0] !== io_hex3_expected_prev[0] )
		&& ((io_hex3_expected_prev[0] !== last_io_hex3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[0] = io_hex3_expected_prev[0];
	end
	if (
		( io_hex3_expected_prev[1] !== 1'bx ) && ( io_hex3_prev[1] !== io_hex3_expected_prev[1] )
		&& ((io_hex3_expected_prev[1] !== last_io_hex3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[1] = io_hex3_expected_prev[1];
	end
	if (
		( io_hex3_expected_prev[2] !== 1'bx ) && ( io_hex3_prev[2] !== io_hex3_expected_prev[2] )
		&& ((io_hex3_expected_prev[2] !== last_io_hex3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[2] = io_hex3_expected_prev[2];
	end
	if (
		( io_hex3_expected_prev[3] !== 1'bx ) && ( io_hex3_prev[3] !== io_hex3_expected_prev[3] )
		&& ((io_hex3_expected_prev[3] !== last_io_hex3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[3] = io_hex3_expected_prev[3];
	end
	if (
		( io_hex3_expected_prev[4] !== 1'bx ) && ( io_hex3_prev[4] !== io_hex3_expected_prev[4] )
		&& ((io_hex3_expected_prev[4] !== last_io_hex3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[4] = io_hex3_expected_prev[4];
	end
	if (
		( io_hex3_expected_prev[5] !== 1'bx ) && ( io_hex3_prev[5] !== io_hex3_expected_prev[5] )
		&& ((io_hex3_expected_prev[5] !== last_io_hex3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[5] = io_hex3_expected_prev[5];
	end
	if (
		( io_hex3_expected_prev[6] !== 1'bx ) && ( io_hex3_prev[6] !== io_hex3_expected_prev[6] )
		&& ((io_hex3_expected_prev[6] !== last_io_hex3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex3_exp[6] = io_hex3_expected_prev[6];
	end
	if (
		( io_hex4_expected_prev[0] !== 1'bx ) && ( io_hex4_prev[0] !== io_hex4_expected_prev[0] )
		&& ((io_hex4_expected_prev[0] !== last_io_hex4_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[0] = io_hex4_expected_prev[0];
	end
	if (
		( io_hex4_expected_prev[1] !== 1'bx ) && ( io_hex4_prev[1] !== io_hex4_expected_prev[1] )
		&& ((io_hex4_expected_prev[1] !== last_io_hex4_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[1] = io_hex4_expected_prev[1];
	end
	if (
		( io_hex4_expected_prev[2] !== 1'bx ) && ( io_hex4_prev[2] !== io_hex4_expected_prev[2] )
		&& ((io_hex4_expected_prev[2] !== last_io_hex4_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[2] = io_hex4_expected_prev[2];
	end
	if (
		( io_hex4_expected_prev[3] !== 1'bx ) && ( io_hex4_prev[3] !== io_hex4_expected_prev[3] )
		&& ((io_hex4_expected_prev[3] !== last_io_hex4_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[3] = io_hex4_expected_prev[3];
	end
	if (
		( io_hex4_expected_prev[4] !== 1'bx ) && ( io_hex4_prev[4] !== io_hex4_expected_prev[4] )
		&& ((io_hex4_expected_prev[4] !== last_io_hex4_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[4] = io_hex4_expected_prev[4];
	end
	if (
		( io_hex4_expected_prev[5] !== 1'bx ) && ( io_hex4_prev[5] !== io_hex4_expected_prev[5] )
		&& ((io_hex4_expected_prev[5] !== last_io_hex4_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[5] = io_hex4_expected_prev[5];
	end
	if (
		( io_hex4_expected_prev[6] !== 1'bx ) && ( io_hex4_prev[6] !== io_hex4_expected_prev[6] )
		&& ((io_hex4_expected_prev[6] !== last_io_hex4_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex4_exp[6] = io_hex4_expected_prev[6];
	end
	if (
		( io_hex5_expected_prev[0] !== 1'bx ) && ( io_hex5_prev[0] !== io_hex5_expected_prev[0] )
		&& ((io_hex5_expected_prev[0] !== last_io_hex5_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[0] = io_hex5_expected_prev[0];
	end
	if (
		( io_hex5_expected_prev[1] !== 1'bx ) && ( io_hex5_prev[1] !== io_hex5_expected_prev[1] )
		&& ((io_hex5_expected_prev[1] !== last_io_hex5_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[1] = io_hex5_expected_prev[1];
	end
	if (
		( io_hex5_expected_prev[2] !== 1'bx ) && ( io_hex5_prev[2] !== io_hex5_expected_prev[2] )
		&& ((io_hex5_expected_prev[2] !== last_io_hex5_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[2] = io_hex5_expected_prev[2];
	end
	if (
		( io_hex5_expected_prev[3] !== 1'bx ) && ( io_hex5_prev[3] !== io_hex5_expected_prev[3] )
		&& ((io_hex5_expected_prev[3] !== last_io_hex5_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[3] = io_hex5_expected_prev[3];
	end
	if (
		( io_hex5_expected_prev[4] !== 1'bx ) && ( io_hex5_prev[4] !== io_hex5_expected_prev[4] )
		&& ((io_hex5_expected_prev[4] !== last_io_hex5_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[4] = io_hex5_expected_prev[4];
	end
	if (
		( io_hex5_expected_prev[5] !== 1'bx ) && ( io_hex5_prev[5] !== io_hex5_expected_prev[5] )
		&& ((io_hex5_expected_prev[5] !== last_io_hex5_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[5] = io_hex5_expected_prev[5];
	end
	if (
		( io_hex5_expected_prev[6] !== 1'bx ) && ( io_hex5_prev[6] !== io_hex5_expected_prev[6] )
		&& ((io_hex5_expected_prev[6] !== last_io_hex5_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_hex5_exp[6] = io_hex5_expected_prev[6];
	end
	if (
		( io_hex6_expected_prev[0] !== 1'bx ) && ( io_hex6_prev[0] !== io_hex6_expected_prev[0] )
		&& ((io_hex6_expected_prev[0] !== last_io_hex6_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[0] = io_hex6_expected_prev[0];
	end
	if (
		( io_hex6_expected_prev[1] !== 1'bx ) && ( io_hex6_prev[1] !== io_hex6_expected_prev[1] )
		&& ((io_hex6_expected_prev[1] !== last_io_hex6_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[1] = io_hex6_expected_prev[1];
	end
	if (
		( io_hex6_expected_prev[2] !== 1'bx ) && ( io_hex6_prev[2] !== io_hex6_expected_prev[2] )
		&& ((io_hex6_expected_prev[2] !== last_io_hex6_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[2] = io_hex6_expected_prev[2];
	end
	if (
		( io_hex6_expected_prev[3] !== 1'bx ) && ( io_hex6_prev[3] !== io_hex6_expected_prev[3] )
		&& ((io_hex6_expected_prev[3] !== last_io_hex6_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[3] = io_hex6_expected_prev[3];
	end
	if (
		( io_hex6_expected_prev[4] !== 1'bx ) && ( io_hex6_prev[4] !== io_hex6_expected_prev[4] )
		&& ((io_hex6_expected_prev[4] !== last_io_hex6_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[4] = io_hex6_expected_prev[4];
	end
	if (
		( io_hex6_expected_prev[5] !== 1'bx ) && ( io_hex6_prev[5] !== io_hex6_expected_prev[5] )
		&& ((io_hex6_expected_prev[5] !== last_io_hex6_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[5] = io_hex6_expected_prev[5];
	end
	if (
		( io_hex6_expected_prev[6] !== 1'bx ) && ( io_hex6_prev[6] !== io_hex6_expected_prev[6] )
		&& ((io_hex6_expected_prev[6] !== last_io_hex6_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_hex6_exp[6] = io_hex6_expected_prev[6];
	end
	if (
		( io_hex7_expected_prev[0] !== 1'bx ) && ( io_hex7_prev[0] !== io_hex7_expected_prev[0] )
		&& ((io_hex7_expected_prev[0] !== last_io_hex7_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[0] = io_hex7_expected_prev[0];
	end
	if (
		( io_hex7_expected_prev[1] !== 1'bx ) && ( io_hex7_prev[1] !== io_hex7_expected_prev[1] )
		&& ((io_hex7_expected_prev[1] !== last_io_hex7_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[1] = io_hex7_expected_prev[1];
	end
	if (
		( io_hex7_expected_prev[2] !== 1'bx ) && ( io_hex7_prev[2] !== io_hex7_expected_prev[2] )
		&& ((io_hex7_expected_prev[2] !== last_io_hex7_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[2] = io_hex7_expected_prev[2];
	end
	if (
		( io_hex7_expected_prev[3] !== 1'bx ) && ( io_hex7_prev[3] !== io_hex7_expected_prev[3] )
		&& ((io_hex7_expected_prev[3] !== last_io_hex7_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[3] = io_hex7_expected_prev[3];
	end
	if (
		( io_hex7_expected_prev[4] !== 1'bx ) && ( io_hex7_prev[4] !== io_hex7_expected_prev[4] )
		&& ((io_hex7_expected_prev[4] !== last_io_hex7_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[4] = io_hex7_expected_prev[4];
	end
	if (
		( io_hex7_expected_prev[5] !== 1'bx ) && ( io_hex7_prev[5] !== io_hex7_expected_prev[5] )
		&& ((io_hex7_expected_prev[5] !== last_io_hex7_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[5] = io_hex7_expected_prev[5];
	end
	if (
		( io_hex7_expected_prev[6] !== 1'bx ) && ( io_hex7_prev[6] !== io_hex7_expected_prev[6] )
		&& ((io_hex7_expected_prev[6] !== last_io_hex7_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_hex7_exp[6] = io_hex7_expected_prev[6];
	end
	if (
		( io_lcd_expected_prev[0] !== 1'bx ) && ( io_lcd_prev[0] !== io_lcd_expected_prev[0] )
		&& ((io_lcd_expected_prev[0] !== last_io_lcd_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[0] = io_lcd_expected_prev[0];
	end
	if (
		( io_lcd_expected_prev[1] !== 1'bx ) && ( io_lcd_prev[1] !== io_lcd_expected_prev[1] )
		&& ((io_lcd_expected_prev[1] !== last_io_lcd_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[1] = io_lcd_expected_prev[1];
	end
	if (
		( io_lcd_expected_prev[2] !== 1'bx ) && ( io_lcd_prev[2] !== io_lcd_expected_prev[2] )
		&& ((io_lcd_expected_prev[2] !== last_io_lcd_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[2] = io_lcd_expected_prev[2];
	end
	if (
		( io_lcd_expected_prev[3] !== 1'bx ) && ( io_lcd_prev[3] !== io_lcd_expected_prev[3] )
		&& ((io_lcd_expected_prev[3] !== last_io_lcd_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[3] = io_lcd_expected_prev[3];
	end
	if (
		( io_lcd_expected_prev[4] !== 1'bx ) && ( io_lcd_prev[4] !== io_lcd_expected_prev[4] )
		&& ((io_lcd_expected_prev[4] !== last_io_lcd_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[4] = io_lcd_expected_prev[4];
	end
	if (
		( io_lcd_expected_prev[5] !== 1'bx ) && ( io_lcd_prev[5] !== io_lcd_expected_prev[5] )
		&& ((io_lcd_expected_prev[5] !== last_io_lcd_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[5] = io_lcd_expected_prev[5];
	end
	if (
		( io_lcd_expected_prev[6] !== 1'bx ) && ( io_lcd_prev[6] !== io_lcd_expected_prev[6] )
		&& ((io_lcd_expected_prev[6] !== last_io_lcd_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[6] = io_lcd_expected_prev[6];
	end
	if (
		( io_lcd_expected_prev[7] !== 1'bx ) && ( io_lcd_prev[7] !== io_lcd_expected_prev[7] )
		&& ((io_lcd_expected_prev[7] !== last_io_lcd_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_io_lcd_exp[7] = io_lcd_expected_prev[7];
	end
	if (
		( io_ledg_expected_prev[0] !== 1'bx ) && ( io_ledg_prev[0] !== io_ledg_expected_prev[0] )
		&& ((io_ledg_expected_prev[0] !== last_io_ledg_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[0] = io_ledg_expected_prev[0];
	end
	if (
		( io_ledg_expected_prev[1] !== 1'bx ) && ( io_ledg_prev[1] !== io_ledg_expected_prev[1] )
		&& ((io_ledg_expected_prev[1] !== last_io_ledg_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[1] = io_ledg_expected_prev[1];
	end
	if (
		( io_ledg_expected_prev[2] !== 1'bx ) && ( io_ledg_prev[2] !== io_ledg_expected_prev[2] )
		&& ((io_ledg_expected_prev[2] !== last_io_ledg_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[2] = io_ledg_expected_prev[2];
	end
	if (
		( io_ledg_expected_prev[3] !== 1'bx ) && ( io_ledg_prev[3] !== io_ledg_expected_prev[3] )
		&& ((io_ledg_expected_prev[3] !== last_io_ledg_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[3] = io_ledg_expected_prev[3];
	end
	if (
		( io_ledg_expected_prev[4] !== 1'bx ) && ( io_ledg_prev[4] !== io_ledg_expected_prev[4] )
		&& ((io_ledg_expected_prev[4] !== last_io_ledg_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[4] = io_ledg_expected_prev[4];
	end
	if (
		( io_ledg_expected_prev[5] !== 1'bx ) && ( io_ledg_prev[5] !== io_ledg_expected_prev[5] )
		&& ((io_ledg_expected_prev[5] !== last_io_ledg_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[5] = io_ledg_expected_prev[5];
	end
	if (
		( io_ledg_expected_prev[6] !== 1'bx ) && ( io_ledg_prev[6] !== io_ledg_expected_prev[6] )
		&& ((io_ledg_expected_prev[6] !== last_io_ledg_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[6] = io_ledg_expected_prev[6];
	end
	if (
		( io_ledg_expected_prev[7] !== 1'bx ) && ( io_ledg_prev[7] !== io_ledg_expected_prev[7] )
		&& ((io_ledg_expected_prev[7] !== last_io_ledg_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[7] = io_ledg_expected_prev[7];
	end
	if (
		( io_ledg_expected_prev[8] !== 1'bx ) && ( io_ledg_prev[8] !== io_ledg_expected_prev[8] )
		&& ((io_ledg_expected_prev[8] !== last_io_ledg_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_io_ledg_exp[8] = io_ledg_expected_prev[8];
	end
	if (
		( io_ledr_expected_prev[0] !== 1'bx ) && ( io_ledr_prev[0] !== io_ledr_expected_prev[0] )
		&& ((io_ledr_expected_prev[0] !== last_io_ledr_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[0] = io_ledr_expected_prev[0];
	end
	if (
		( io_ledr_expected_prev[1] !== 1'bx ) && ( io_ledr_prev[1] !== io_ledr_expected_prev[1] )
		&& ((io_ledr_expected_prev[1] !== last_io_ledr_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[1] = io_ledr_expected_prev[1];
	end
	if (
		( io_ledr_expected_prev[2] !== 1'bx ) && ( io_ledr_prev[2] !== io_ledr_expected_prev[2] )
		&& ((io_ledr_expected_prev[2] !== last_io_ledr_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[2] = io_ledr_expected_prev[2];
	end
	if (
		( io_ledr_expected_prev[3] !== 1'bx ) && ( io_ledr_prev[3] !== io_ledr_expected_prev[3] )
		&& ((io_ledr_expected_prev[3] !== last_io_ledr_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[3] = io_ledr_expected_prev[3];
	end
	if (
		( io_ledr_expected_prev[4] !== 1'bx ) && ( io_ledr_prev[4] !== io_ledr_expected_prev[4] )
		&& ((io_ledr_expected_prev[4] !== last_io_ledr_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[4] = io_ledr_expected_prev[4];
	end
	if (
		( io_ledr_expected_prev[5] !== 1'bx ) && ( io_ledr_prev[5] !== io_ledr_expected_prev[5] )
		&& ((io_ledr_expected_prev[5] !== last_io_ledr_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[5] = io_ledr_expected_prev[5];
	end
	if (
		( io_ledr_expected_prev[6] !== 1'bx ) && ( io_ledr_prev[6] !== io_ledr_expected_prev[6] )
		&& ((io_ledr_expected_prev[6] !== last_io_ledr_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[6] = io_ledr_expected_prev[6];
	end
	if (
		( io_ledr_expected_prev[7] !== 1'bx ) && ( io_ledr_prev[7] !== io_ledr_expected_prev[7] )
		&& ((io_ledr_expected_prev[7] !== last_io_ledr_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[7] = io_ledr_expected_prev[7];
	end
	if (
		( io_ledr_expected_prev[8] !== 1'bx ) && ( io_ledr_prev[8] !== io_ledr_expected_prev[8] )
		&& ((io_ledr_expected_prev[8] !== last_io_ledr_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[8] = io_ledr_expected_prev[8];
	end
	if (
		( io_ledr_expected_prev[9] !== 1'bx ) && ( io_ledr_prev[9] !== io_ledr_expected_prev[9] )
		&& ((io_ledr_expected_prev[9] !== last_io_ledr_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[9] = io_ledr_expected_prev[9];
	end
	if (
		( io_ledr_expected_prev[10] !== 1'bx ) && ( io_ledr_prev[10] !== io_ledr_expected_prev[10] )
		&& ((io_ledr_expected_prev[10] !== last_io_ledr_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[10] = io_ledr_expected_prev[10];
	end
	if (
		( io_ledr_expected_prev[11] !== 1'bx ) && ( io_ledr_prev[11] !== io_ledr_expected_prev[11] )
		&& ((io_ledr_expected_prev[11] !== last_io_ledr_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[11] = io_ledr_expected_prev[11];
	end
	if (
		( io_ledr_expected_prev[12] !== 1'bx ) && ( io_ledr_prev[12] !== io_ledr_expected_prev[12] )
		&& ((io_ledr_expected_prev[12] !== last_io_ledr_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[12] = io_ledr_expected_prev[12];
	end
	if (
		( io_ledr_expected_prev[13] !== 1'bx ) && ( io_ledr_prev[13] !== io_ledr_expected_prev[13] )
		&& ((io_ledr_expected_prev[13] !== last_io_ledr_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[13] = io_ledr_expected_prev[13];
	end
	if (
		( io_ledr_expected_prev[14] !== 1'bx ) && ( io_ledr_prev[14] !== io_ledr_expected_prev[14] )
		&& ((io_ledr_expected_prev[14] !== last_io_ledr_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[14] = io_ledr_expected_prev[14];
	end
	if (
		( io_ledr_expected_prev[15] !== 1'bx ) && ( io_ledr_prev[15] !== io_ledr_expected_prev[15] )
		&& ((io_ledr_expected_prev[15] !== last_io_ledr_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[15] = io_ledr_expected_prev[15];
	end
	if (
		( io_ledr_expected_prev[16] !== 1'bx ) && ( io_ledr_prev[16] !== io_ledr_expected_prev[16] )
		&& ((io_ledr_expected_prev[16] !== last_io_ledr_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[16] = io_ledr_expected_prev[16];
	end
	if (
		( io_ledr_expected_prev[17] !== 1'bx ) && ( io_ledr_prev[17] !== io_ledr_expected_prev[17] )
		&& ((io_ledr_expected_prev[17] !== last_io_ledr_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_io_ledr_exp[17] = io_ledr_expected_prev[17];
	end
	if (
		( pc_debug_expected_prev[0] !== 1'bx ) && ( pc_debug_prev[0] !== pc_debug_expected_prev[0] )
		&& ((pc_debug_expected_prev[0] !== last_pc_debug_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[0] = pc_debug_expected_prev[0];
	end
	if (
		( pc_debug_expected_prev[1] !== 1'bx ) && ( pc_debug_prev[1] !== pc_debug_expected_prev[1] )
		&& ((pc_debug_expected_prev[1] !== last_pc_debug_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[1] = pc_debug_expected_prev[1];
	end
	if (
		( pc_debug_expected_prev[2] !== 1'bx ) && ( pc_debug_prev[2] !== pc_debug_expected_prev[2] )
		&& ((pc_debug_expected_prev[2] !== last_pc_debug_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[2] = pc_debug_expected_prev[2];
	end
	if (
		( pc_debug_expected_prev[3] !== 1'bx ) && ( pc_debug_prev[3] !== pc_debug_expected_prev[3] )
		&& ((pc_debug_expected_prev[3] !== last_pc_debug_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[3] = pc_debug_expected_prev[3];
	end
	if (
		( pc_debug_expected_prev[4] !== 1'bx ) && ( pc_debug_prev[4] !== pc_debug_expected_prev[4] )
		&& ((pc_debug_expected_prev[4] !== last_pc_debug_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[4] = pc_debug_expected_prev[4];
	end
	if (
		( pc_debug_expected_prev[5] !== 1'bx ) && ( pc_debug_prev[5] !== pc_debug_expected_prev[5] )
		&& ((pc_debug_expected_prev[5] !== last_pc_debug_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[5] = pc_debug_expected_prev[5];
	end
	if (
		( pc_debug_expected_prev[6] !== 1'bx ) && ( pc_debug_prev[6] !== pc_debug_expected_prev[6] )
		&& ((pc_debug_expected_prev[6] !== last_pc_debug_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[6] = pc_debug_expected_prev[6];
	end
	if (
		( pc_debug_expected_prev[7] !== 1'bx ) && ( pc_debug_prev[7] !== pc_debug_expected_prev[7] )
		&& ((pc_debug_expected_prev[7] !== last_pc_debug_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[7] = pc_debug_expected_prev[7];
	end
	if (
		( pc_debug_expected_prev[8] !== 1'bx ) && ( pc_debug_prev[8] !== pc_debug_expected_prev[8] )
		&& ((pc_debug_expected_prev[8] !== last_pc_debug_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[8] = pc_debug_expected_prev[8];
	end
	if (
		( pc_debug_expected_prev[9] !== 1'bx ) && ( pc_debug_prev[9] !== pc_debug_expected_prev[9] )
		&& ((pc_debug_expected_prev[9] !== last_pc_debug_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[9] = pc_debug_expected_prev[9];
	end
	if (
		( pc_debug_expected_prev[10] !== 1'bx ) && ( pc_debug_prev[10] !== pc_debug_expected_prev[10] )
		&& ((pc_debug_expected_prev[10] !== last_pc_debug_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[10] = pc_debug_expected_prev[10];
	end
	if (
		( pc_debug_expected_prev[11] !== 1'bx ) && ( pc_debug_prev[11] !== pc_debug_expected_prev[11] )
		&& ((pc_debug_expected_prev[11] !== last_pc_debug_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[11] = pc_debug_expected_prev[11];
	end
	if (
		( pc_debug_expected_prev[12] !== 1'bx ) && ( pc_debug_prev[12] !== pc_debug_expected_prev[12] )
		&& ((pc_debug_expected_prev[12] !== last_pc_debug_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[12] = pc_debug_expected_prev[12];
	end
	if (
		( pc_debug_expected_prev[13] !== 1'bx ) && ( pc_debug_prev[13] !== pc_debug_expected_prev[13] )
		&& ((pc_debug_expected_prev[13] !== last_pc_debug_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[13] = pc_debug_expected_prev[13];
	end
	if (
		( pc_debug_expected_prev[14] !== 1'bx ) && ( pc_debug_prev[14] !== pc_debug_expected_prev[14] )
		&& ((pc_debug_expected_prev[14] !== last_pc_debug_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[14] = pc_debug_expected_prev[14];
	end
	if (
		( pc_debug_expected_prev[15] !== 1'bx ) && ( pc_debug_prev[15] !== pc_debug_expected_prev[15] )
		&& ((pc_debug_expected_prev[15] !== last_pc_debug_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[15] = pc_debug_expected_prev[15];
	end
	if (
		( pc_debug_expected_prev[16] !== 1'bx ) && ( pc_debug_prev[16] !== pc_debug_expected_prev[16] )
		&& ((pc_debug_expected_prev[16] !== last_pc_debug_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[16] = pc_debug_expected_prev[16];
	end
	if (
		( pc_debug_expected_prev[17] !== 1'bx ) && ( pc_debug_prev[17] !== pc_debug_expected_prev[17] )
		&& ((pc_debug_expected_prev[17] !== last_pc_debug_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[17] = pc_debug_expected_prev[17];
	end
	if (
		( pc_debug_expected_prev[18] !== 1'bx ) && ( pc_debug_prev[18] !== pc_debug_expected_prev[18] )
		&& ((pc_debug_expected_prev[18] !== last_pc_debug_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[18] = pc_debug_expected_prev[18];
	end
	if (
		( pc_debug_expected_prev[19] !== 1'bx ) && ( pc_debug_prev[19] !== pc_debug_expected_prev[19] )
		&& ((pc_debug_expected_prev[19] !== last_pc_debug_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[19] = pc_debug_expected_prev[19];
	end
	if (
		( pc_debug_expected_prev[20] !== 1'bx ) && ( pc_debug_prev[20] !== pc_debug_expected_prev[20] )
		&& ((pc_debug_expected_prev[20] !== last_pc_debug_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[20] = pc_debug_expected_prev[20];
	end
	if (
		( pc_debug_expected_prev[21] !== 1'bx ) && ( pc_debug_prev[21] !== pc_debug_expected_prev[21] )
		&& ((pc_debug_expected_prev[21] !== last_pc_debug_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[21] = pc_debug_expected_prev[21];
	end
	if (
		( pc_debug_expected_prev[22] !== 1'bx ) && ( pc_debug_prev[22] !== pc_debug_expected_prev[22] )
		&& ((pc_debug_expected_prev[22] !== last_pc_debug_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[22] = pc_debug_expected_prev[22];
	end
	if (
		( pc_debug_expected_prev[23] !== 1'bx ) && ( pc_debug_prev[23] !== pc_debug_expected_prev[23] )
		&& ((pc_debug_expected_prev[23] !== last_pc_debug_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[23] = pc_debug_expected_prev[23];
	end
	if (
		( pc_debug_expected_prev[24] !== 1'bx ) && ( pc_debug_prev[24] !== pc_debug_expected_prev[24] )
		&& ((pc_debug_expected_prev[24] !== last_pc_debug_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[24] = pc_debug_expected_prev[24];
	end
	if (
		( pc_debug_expected_prev[25] !== 1'bx ) && ( pc_debug_prev[25] !== pc_debug_expected_prev[25] )
		&& ((pc_debug_expected_prev[25] !== last_pc_debug_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[25] = pc_debug_expected_prev[25];
	end
	if (
		( pc_debug_expected_prev[26] !== 1'bx ) && ( pc_debug_prev[26] !== pc_debug_expected_prev[26] )
		&& ((pc_debug_expected_prev[26] !== last_pc_debug_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[26] = pc_debug_expected_prev[26];
	end
	if (
		( pc_debug_expected_prev[27] !== 1'bx ) && ( pc_debug_prev[27] !== pc_debug_expected_prev[27] )
		&& ((pc_debug_expected_prev[27] !== last_pc_debug_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[27] = pc_debug_expected_prev[27];
	end
	if (
		( pc_debug_expected_prev[28] !== 1'bx ) && ( pc_debug_prev[28] !== pc_debug_expected_prev[28] )
		&& ((pc_debug_expected_prev[28] !== last_pc_debug_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[28] = pc_debug_expected_prev[28];
	end
	if (
		( pc_debug_expected_prev[29] !== 1'bx ) && ( pc_debug_prev[29] !== pc_debug_expected_prev[29] )
		&& ((pc_debug_expected_prev[29] !== last_pc_debug_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[29] = pc_debug_expected_prev[29];
	end
	if (
		( pc_debug_expected_prev[30] !== 1'bx ) && ( pc_debug_prev[30] !== pc_debug_expected_prev[30] )
		&& ((pc_debug_expected_prev[30] !== last_pc_debug_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[30] = pc_debug_expected_prev[30];
	end
	if (
		( pc_debug_expected_prev[31] !== 1'bx ) && ( pc_debug_prev[31] !== pc_debug_expected_prev[31] )
		&& ((pc_debug_expected_prev[31] !== last_pc_debug_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_expected_prev);
		$display ("     Real value = %b", pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pc_debug_exp[31] = pc_debug_expected_prev[31];
	end
	if (
		( rs1_expected_prev[0] !== 1'bx ) && ( rs1_prev[0] !== rs1_expected_prev[0] )
		&& ((rs1_expected_prev[0] !== last_rs1_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rs1_exp[0] = rs1_expected_prev[0];
	end
	if (
		( rs1_expected_prev[1] !== 1'bx ) && ( rs1_prev[1] !== rs1_expected_prev[1] )
		&& ((rs1_expected_prev[1] !== last_rs1_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rs1_exp[1] = rs1_expected_prev[1];
	end
	if (
		( rs1_expected_prev[2] !== 1'bx ) && ( rs1_prev[2] !== rs1_expected_prev[2] )
		&& ((rs1_expected_prev[2] !== last_rs1_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rs1_exp[2] = rs1_expected_prev[2];
	end
	if (
		( rs1_expected_prev[3] !== 1'bx ) && ( rs1_prev[3] !== rs1_expected_prev[3] )
		&& ((rs1_expected_prev[3] !== last_rs1_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rs1_exp[3] = rs1_expected_prev[3];
	end
	if (
		( rs1_expected_prev[4] !== 1'bx ) && ( rs1_prev[4] !== rs1_expected_prev[4] )
		&& ((rs1_expected_prev[4] !== last_rs1_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rs1_exp[4] = rs1_expected_prev[4];
	end
	if (
		( rs2_expected_prev[0] !== 1'bx ) && ( rs2_prev[0] !== rs2_expected_prev[0] )
		&& ((rs2_expected_prev[0] !== last_rs2_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rs2_exp[0] = rs2_expected_prev[0];
	end
	if (
		( rs2_expected_prev[1] !== 1'bx ) && ( rs2_prev[1] !== rs2_expected_prev[1] )
		&& ((rs2_expected_prev[1] !== last_rs2_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rs2_exp[1] = rs2_expected_prev[1];
	end
	if (
		( rs2_expected_prev[2] !== 1'bx ) && ( rs2_prev[2] !== rs2_expected_prev[2] )
		&& ((rs2_expected_prev[2] !== last_rs2_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rs2_exp[2] = rs2_expected_prev[2];
	end
	if (
		( rs2_expected_prev[3] !== 1'bx ) && ( rs2_prev[3] !== rs2_expected_prev[3] )
		&& ((rs2_expected_prev[3] !== last_rs2_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rs2_exp[3] = rs2_expected_prev[3];
	end
	if (
		( rs2_expected_prev[4] !== 1'bx ) && ( rs2_prev[4] !== rs2_expected_prev[4] )
		&& ((rs2_expected_prev[4] !== last_rs2_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rs2_exp[4] = rs2_expected_prev[4];
	end
	if (
		( wb_mux_out_expected_prev[0] !== 1'bx ) && ( wb_mux_out_prev[0] !== wb_mux_out_expected_prev[0] )
		&& ((wb_mux_out_expected_prev[0] !== last_wb_mux_out_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[0] = wb_mux_out_expected_prev[0];
	end
	if (
		( wb_mux_out_expected_prev[1] !== 1'bx ) && ( wb_mux_out_prev[1] !== wb_mux_out_expected_prev[1] )
		&& ((wb_mux_out_expected_prev[1] !== last_wb_mux_out_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[1] = wb_mux_out_expected_prev[1];
	end
	if (
		( wb_mux_out_expected_prev[2] !== 1'bx ) && ( wb_mux_out_prev[2] !== wb_mux_out_expected_prev[2] )
		&& ((wb_mux_out_expected_prev[2] !== last_wb_mux_out_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[2] = wb_mux_out_expected_prev[2];
	end
	if (
		( wb_mux_out_expected_prev[3] !== 1'bx ) && ( wb_mux_out_prev[3] !== wb_mux_out_expected_prev[3] )
		&& ((wb_mux_out_expected_prev[3] !== last_wb_mux_out_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[3] = wb_mux_out_expected_prev[3];
	end
	if (
		( wb_mux_out_expected_prev[4] !== 1'bx ) && ( wb_mux_out_prev[4] !== wb_mux_out_expected_prev[4] )
		&& ((wb_mux_out_expected_prev[4] !== last_wb_mux_out_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[4] = wb_mux_out_expected_prev[4];
	end
	if (
		( wb_mux_out_expected_prev[5] !== 1'bx ) && ( wb_mux_out_prev[5] !== wb_mux_out_expected_prev[5] )
		&& ((wb_mux_out_expected_prev[5] !== last_wb_mux_out_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[5] = wb_mux_out_expected_prev[5];
	end
	if (
		( wb_mux_out_expected_prev[6] !== 1'bx ) && ( wb_mux_out_prev[6] !== wb_mux_out_expected_prev[6] )
		&& ((wb_mux_out_expected_prev[6] !== last_wb_mux_out_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[6] = wb_mux_out_expected_prev[6];
	end
	if (
		( wb_mux_out_expected_prev[7] !== 1'bx ) && ( wb_mux_out_prev[7] !== wb_mux_out_expected_prev[7] )
		&& ((wb_mux_out_expected_prev[7] !== last_wb_mux_out_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[7] = wb_mux_out_expected_prev[7];
	end
	if (
		( wb_mux_out_expected_prev[8] !== 1'bx ) && ( wb_mux_out_prev[8] !== wb_mux_out_expected_prev[8] )
		&& ((wb_mux_out_expected_prev[8] !== last_wb_mux_out_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[8] = wb_mux_out_expected_prev[8];
	end
	if (
		( wb_mux_out_expected_prev[9] !== 1'bx ) && ( wb_mux_out_prev[9] !== wb_mux_out_expected_prev[9] )
		&& ((wb_mux_out_expected_prev[9] !== last_wb_mux_out_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[9] = wb_mux_out_expected_prev[9];
	end
	if (
		( wb_mux_out_expected_prev[10] !== 1'bx ) && ( wb_mux_out_prev[10] !== wb_mux_out_expected_prev[10] )
		&& ((wb_mux_out_expected_prev[10] !== last_wb_mux_out_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[10] = wb_mux_out_expected_prev[10];
	end
	if (
		( wb_mux_out_expected_prev[11] !== 1'bx ) && ( wb_mux_out_prev[11] !== wb_mux_out_expected_prev[11] )
		&& ((wb_mux_out_expected_prev[11] !== last_wb_mux_out_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[11] = wb_mux_out_expected_prev[11];
	end
	if (
		( wb_mux_out_expected_prev[12] !== 1'bx ) && ( wb_mux_out_prev[12] !== wb_mux_out_expected_prev[12] )
		&& ((wb_mux_out_expected_prev[12] !== last_wb_mux_out_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[12] = wb_mux_out_expected_prev[12];
	end
	if (
		( wb_mux_out_expected_prev[13] !== 1'bx ) && ( wb_mux_out_prev[13] !== wb_mux_out_expected_prev[13] )
		&& ((wb_mux_out_expected_prev[13] !== last_wb_mux_out_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[13] = wb_mux_out_expected_prev[13];
	end
	if (
		( wb_mux_out_expected_prev[14] !== 1'bx ) && ( wb_mux_out_prev[14] !== wb_mux_out_expected_prev[14] )
		&& ((wb_mux_out_expected_prev[14] !== last_wb_mux_out_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[14] = wb_mux_out_expected_prev[14];
	end
	if (
		( wb_mux_out_expected_prev[15] !== 1'bx ) && ( wb_mux_out_prev[15] !== wb_mux_out_expected_prev[15] )
		&& ((wb_mux_out_expected_prev[15] !== last_wb_mux_out_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[15] = wb_mux_out_expected_prev[15];
	end
	if (
		( wb_mux_out_expected_prev[16] !== 1'bx ) && ( wb_mux_out_prev[16] !== wb_mux_out_expected_prev[16] )
		&& ((wb_mux_out_expected_prev[16] !== last_wb_mux_out_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[16] = wb_mux_out_expected_prev[16];
	end
	if (
		( wb_mux_out_expected_prev[17] !== 1'bx ) && ( wb_mux_out_prev[17] !== wb_mux_out_expected_prev[17] )
		&& ((wb_mux_out_expected_prev[17] !== last_wb_mux_out_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[17] = wb_mux_out_expected_prev[17];
	end
	if (
		( wb_mux_out_expected_prev[18] !== 1'bx ) && ( wb_mux_out_prev[18] !== wb_mux_out_expected_prev[18] )
		&& ((wb_mux_out_expected_prev[18] !== last_wb_mux_out_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[18] = wb_mux_out_expected_prev[18];
	end
	if (
		( wb_mux_out_expected_prev[19] !== 1'bx ) && ( wb_mux_out_prev[19] !== wb_mux_out_expected_prev[19] )
		&& ((wb_mux_out_expected_prev[19] !== last_wb_mux_out_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[19] = wb_mux_out_expected_prev[19];
	end
	if (
		( wb_mux_out_expected_prev[20] !== 1'bx ) && ( wb_mux_out_prev[20] !== wb_mux_out_expected_prev[20] )
		&& ((wb_mux_out_expected_prev[20] !== last_wb_mux_out_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[20] = wb_mux_out_expected_prev[20];
	end
	if (
		( wb_mux_out_expected_prev[21] !== 1'bx ) && ( wb_mux_out_prev[21] !== wb_mux_out_expected_prev[21] )
		&& ((wb_mux_out_expected_prev[21] !== last_wb_mux_out_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[21] = wb_mux_out_expected_prev[21];
	end
	if (
		( wb_mux_out_expected_prev[22] !== 1'bx ) && ( wb_mux_out_prev[22] !== wb_mux_out_expected_prev[22] )
		&& ((wb_mux_out_expected_prev[22] !== last_wb_mux_out_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[22] = wb_mux_out_expected_prev[22];
	end
	if (
		( wb_mux_out_expected_prev[23] !== 1'bx ) && ( wb_mux_out_prev[23] !== wb_mux_out_expected_prev[23] )
		&& ((wb_mux_out_expected_prev[23] !== last_wb_mux_out_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[23] = wb_mux_out_expected_prev[23];
	end
	if (
		( wb_mux_out_expected_prev[24] !== 1'bx ) && ( wb_mux_out_prev[24] !== wb_mux_out_expected_prev[24] )
		&& ((wb_mux_out_expected_prev[24] !== last_wb_mux_out_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[24] = wb_mux_out_expected_prev[24];
	end
	if (
		( wb_mux_out_expected_prev[25] !== 1'bx ) && ( wb_mux_out_prev[25] !== wb_mux_out_expected_prev[25] )
		&& ((wb_mux_out_expected_prev[25] !== last_wb_mux_out_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[25] = wb_mux_out_expected_prev[25];
	end
	if (
		( wb_mux_out_expected_prev[26] !== 1'bx ) && ( wb_mux_out_prev[26] !== wb_mux_out_expected_prev[26] )
		&& ((wb_mux_out_expected_prev[26] !== last_wb_mux_out_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[26] = wb_mux_out_expected_prev[26];
	end
	if (
		( wb_mux_out_expected_prev[27] !== 1'bx ) && ( wb_mux_out_prev[27] !== wb_mux_out_expected_prev[27] )
		&& ((wb_mux_out_expected_prev[27] !== last_wb_mux_out_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[27] = wb_mux_out_expected_prev[27];
	end
	if (
		( wb_mux_out_expected_prev[28] !== 1'bx ) && ( wb_mux_out_prev[28] !== wb_mux_out_expected_prev[28] )
		&& ((wb_mux_out_expected_prev[28] !== last_wb_mux_out_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[28] = wb_mux_out_expected_prev[28];
	end
	if (
		( wb_mux_out_expected_prev[29] !== 1'bx ) && ( wb_mux_out_prev[29] !== wb_mux_out_expected_prev[29] )
		&& ((wb_mux_out_expected_prev[29] !== last_wb_mux_out_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[29] = wb_mux_out_expected_prev[29];
	end
	if (
		( wb_mux_out_expected_prev[30] !== 1'bx ) && ( wb_mux_out_prev[30] !== wb_mux_out_expected_prev[30] )
		&& ((wb_mux_out_expected_prev[30] !== last_wb_mux_out_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[30] = wb_mux_out_expected_prev[30];
	end
	if (
		( wb_mux_out_expected_prev[31] !== 1'bx ) && ( wb_mux_out_prev[31] !== wb_mux_out_expected_prev[31] )
		&& ((wb_mux_out_expected_prev[31] !== last_wb_mux_out_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wb_mux_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wb_mux_out_expected_prev);
		$display ("     Real value = %b", wb_mux_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_wb_mux_out_exp[31] = wb_mux_out_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Single_Cycle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_i;
reg [31:0] io_sw;
reg rst_ni;
// wires                                               
wire [31:0] alu_data_out;
wire branch_signal;
wire [31:0] instruc_test;
wire [6:0] io_hex0;
wire [6:0] io_hex1;
wire [6:0] io_hex2;
wire [6:0] io_hex3;
wire [6:0] io_hex4;
wire [6:0] io_hex5;
wire [6:0] io_hex6;
wire [6:0] io_hex7;
wire [7:0] io_lcd;
wire [8:0] io_ledg;
wire [17:0] io_ledr;
wire [31:0] pc_debug;
wire [4:0] rs1;
wire [4:0] rs2;
wire [31:0] wb_mux_out;

wire sampler;                             

// assign statements (if any)                          
Single_Cycle i1 (
// port map - connection between master ports and signals/registers   
	.alu_data_out(alu_data_out),
	.branch_signal(branch_signal),
	.clk_i(clk_i),
	.instruc_test(instruc_test),
	.io_hex0(io_hex0),
	.io_hex1(io_hex1),
	.io_hex2(io_hex2),
	.io_hex3(io_hex3),
	.io_hex4(io_hex4),
	.io_hex5(io_hex5),
	.io_hex6(io_hex6),
	.io_hex7(io_hex7),
	.io_lcd(io_lcd),
	.io_ledg(io_ledg),
	.io_ledr(io_ledr),
	.io_sw(io_sw),
	.pc_debug(pc_debug),
	.rs1(rs1),
	.rs2(rs2),
	.rst_ni(rst_ni),
	.wb_mux_out(wb_mux_out)
);

// rst_ni
initial
begin
	rst_ni = 1'b1;
end 

// clk_i
always
begin
	clk_i = 1'b0;
	clk_i = #5000 1'b1;
	#5000;
end 
// io_sw[ 31 ]
initial
begin
	io_sw[31] = 1'b0;
end 
// io_sw[ 30 ]
initial
begin
	io_sw[30] = 1'b0;
end 
// io_sw[ 29 ]
initial
begin
	io_sw[29] = 1'b0;
end 
// io_sw[ 28 ]
initial
begin
	io_sw[28] = 1'b0;
end 
// io_sw[ 27 ]
initial
begin
	io_sw[27] = 1'b0;
end 
// io_sw[ 26 ]
initial
begin
	io_sw[26] = 1'b0;
end 
// io_sw[ 25 ]
initial
begin
	io_sw[25] = 1'b0;
end 
// io_sw[ 24 ]
initial
begin
	io_sw[24] = 1'b0;
end 
// io_sw[ 23 ]
initial
begin
	io_sw[23] = 1'b0;
end 
// io_sw[ 22 ]
initial
begin
	io_sw[22] = 1'b0;
end 
// io_sw[ 21 ]
initial
begin
	io_sw[21] = 1'b0;
end 
// io_sw[ 20 ]
initial
begin
	io_sw[20] = 1'b0;
end 
// io_sw[ 19 ]
initial
begin
	io_sw[19] = 1'b0;
end 
// io_sw[ 18 ]
initial
begin
	io_sw[18] = 1'b0;
end 
// io_sw[ 17 ]
initial
begin
	io_sw[17] = 1'b0;
end 
// io_sw[ 16 ]
initial
begin
	io_sw[16] = 1'b0;
end 
// io_sw[ 15 ]
initial
begin
	io_sw[15] = 1'b0;
end 
// io_sw[ 14 ]
initial
begin
	io_sw[14] = 1'b0;
end 
// io_sw[ 13 ]
initial
begin
	io_sw[13] = 1'b0;
end 
// io_sw[ 12 ]
initial
begin
	io_sw[12] = 1'b0;
end 
// io_sw[ 11 ]
initial
begin
	io_sw[11] = 1'b0;
end 
// io_sw[ 10 ]
initial
begin
	io_sw[10] = 1'b0;
end 
// io_sw[ 9 ]
initial
begin
	io_sw[9] = 1'b0;
end 
// io_sw[ 8 ]
initial
begin
	io_sw[8] = 1'b0;
end 
// io_sw[ 7 ]
initial
begin
	io_sw[7] = 1'b0;
end 
// io_sw[ 6 ]
initial
begin
	io_sw[6] = 1'b0;
end 
// io_sw[ 5 ]
initial
begin
	io_sw[5] = 1'b0;
end 
// io_sw[ 4 ]
initial
begin
	io_sw[4] = 1'b0;
end 
// io_sw[ 3 ]
initial
begin
	io_sw[3] = 1'b0;
end 
// io_sw[ 2 ]
initial
begin
	io_sw[2] = 1'b0;
end 
// io_sw[ 1 ]
initial
begin
	io_sw[1] = 1'b0;
end 
// io_sw[ 0 ]
initial
begin
	io_sw[0] = 1'b0;
end 

Single_Cycle_vlg_sample_tst tb_sample (
	.clk_i(clk_i),
	.io_sw(io_sw),
	.rst_ni(rst_ni),
	.sampler_tx(sampler)
);

Single_Cycle_vlg_check_tst tb_out(
	.alu_data_out(alu_data_out),
	.branch_signal(branch_signal),
	.instruc_test(instruc_test),
	.io_hex0(io_hex0),
	.io_hex1(io_hex1),
	.io_hex2(io_hex2),
	.io_hex3(io_hex3),
	.io_hex4(io_hex4),
	.io_hex5(io_hex5),
	.io_hex6(io_hex6),
	.io_hex7(io_hex7),
	.io_lcd(io_lcd),
	.io_ledg(io_ledg),
	.io_ledr(io_ledr),
	.pc_debug(pc_debug),
	.rs1(rs1),
	.rs2(rs2),
	.wb_mux_out(wb_mux_out),
	.sampler_rx(sampler)
);
endmodule

