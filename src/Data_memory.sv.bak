module Data_memory#(parameter Width = 8, parameter Numbit =32)(
	input logic clk_i, st_en, 
	input logic [2:0] funct3,
	input logic [Numbit-1:0] st_data, 
	input logic [10:0] addr,
	output logic [Numbit-1:0] ld_data
);

logic [Width -1: 0] mem [2048- 1:0];


always_ff @(posedge clk_i) begin : Data_memory
	if (st_en) begin 
		case(funct3) 
		3'd0: begin // byte
			mem[addr] <= st_data[7:0]; end
		3'd1: begin // half word
			mem[addr] <= st_data[7:0];
			mem[addr + 1] <= st_data[15:8]; end
		3'd2: begin // word
			mem[addr] <= st_data[7:0];
			mem[addr + 1] <= st_data[15:8]; 
			mem[addr + 2] <= st_data[23:16];
			mem[addr + 3] <= st_data[31:24];  end
		default: begin 
			mem[addr] <= st_data[7:0];
			mem[addr + 1] <= st_data[15:8]; 
			mem[addr + 2] <= st_data[23:16];
			mem[addr + 3] <= st_data[31:24]; end
		endcase
		end
	else if (!st_en) begin
		case(funct3) 
		3'd0: begin // byte
			ld_data[7:0] <= mem[addr];
			ld_data[31:8] <= {24{ld_data[15]}}; end
		3'd1: begin // half word
			ld_data[7:0] <= mem[addr];
			ld_data[15:8] <= mem[addr +1];
			ld_data[31:16] <= {16{ld_data[15]}}; end
		3'd2: begin // word
			ld_data[7:0] <= mem[addr];
			ld_data[15:8] <= mem[addr+1];
			ld_data[23:16] <= mem[addr+2];
			ld_data[31:24] <= mem[addr+3]; end
		3'd4: begin // Unsigned byte
			ld_data[7:0] <= mem[addr];
			ld_data[31:8] <= 24'd0; end
		3'd5: begin // Unsigned half word
			ld_data[7:0] <= mem[addr];
			ld_data[15:8] <= mem[addr +1];
			ld_data[31:16] <= 16'd0; end
		default: begin 
			ld_data[7:0] <= mem[addr];
			ld_data[15:8] <= mem[addr+1];
			ld_data[23:16] <= mem[addr+2];
			ld_data[31:24] <= mem[addr+3]; end
		endcase
	end
end
endmodule


